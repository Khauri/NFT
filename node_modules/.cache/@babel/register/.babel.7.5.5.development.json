{
  "{\"sourceRoot\":\"/Users/khauri/Documents/NFT\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/khauri/Documents/NFT\",\"filename\":\"/Users/khauri/Documents/NFT/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/khauri/Documents/NFT\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.5.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/khauri/Documents/NFT",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/khauri/Documents/NFT",
      "filename": "/Users/khauri/Documents/NFT/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/khauri/Documents/NFT",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/khauri/Documents/NFT/index.js",
        "plugins": [
          "dynamicImport",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/khauri/Documents/NFT/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/khauri/Documents/NFT",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _src = _interopRequireDefault(require(\"./src\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n_src[\"default\"].parseText(\"\\nEm G/5      D {C#7,C4Maj7}/63\\nHello,  it's me\\n       Em          G                D\\nI was wondering if after all these years\\n\");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIk5GVCIsInBhcnNlVGV4dCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztBQUVBQSxnQkFBSUMsU0FBSiIsInNvdXJjZVJvb3QiOiIvVXNlcnMva2hhdXJpL0RvY3VtZW50cy9ORlQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTkZUIGZyb20gJy4vc3JjJ1xuXG5ORlQucGFyc2VUZXh0KFxuYFxuRW0gRy81ICAgICAgRCB7QyM3LEM0TWFqN30vNjNcbkhlbGxvLCAgaXQncyBtZVxuICAgICAgIEVtICAgICAgICAgIEcgICAgICAgICAgICAgICAgRFxuSSB3YXMgd29uZGVyaW5nIGlmIGFmdGVyIGFsbCB0aGVzZSB5ZWFyc1xuYCkiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "NFT",
        "parseText"
      ],
      "mappings": ";;AAAA;;;;AAEAA,gBAAIC,SAAJ",
      "sourceRoot": "/Users/khauri/Documents/NFT",
      "sourcesContent": [
        "import NFT from './src'\n\nNFT.parseText(\n`\nEm G/5      D {C#7,C4Maj7}/63\nHello,  it's me\n       Em          G                D\nI was wondering if after all these years\n`)"
      ]
    },
    "sourceType": "script",
    "mtime": 1565721219616
  },
  "{\"sourceRoot\":\"/Users/khauri/Documents/NFT/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/khauri/Documents/NFT\",\"filename\":\"/Users/khauri/Documents/NFT/src/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/khauri/Documents/NFT\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.5.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/khauri/Documents/NFT/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/khauri/Documents/NFT",
      "filename": "/Users/khauri/Documents/NFT/src/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/khauri/Documents/NFT",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/khauri/Documents/NFT/src/index.js",
        "plugins": [
          "dynamicImport",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/khauri/Documents/NFT/src/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/khauri/Documents/NFT/src",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _parser = require(\"./parser\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Note =\n/*#__PURE__*/\nfunction () {\n  function Note() {\n    _classCallCheck(this, Note);\n  }\n\n  _createClass(Note, [{\n    key: \"transpose\",\n    value: function transpose() {}\n  }]);\n\n  return Note;\n}();\n/**\n * A Chord consists of one or more notes played simultaneously\n */\n\n\nvar Chord = function Chord() {\n  _classCallCheck(this, Chord);\n\n  this.measure = null;\n  this.staff = null;\n  this.notes = [];\n  this.duration = 1;\n};\n\nvar Measure =\n/*#__PURE__*/\nfunction () {\n  function Measure(_ref) {\n    var _ref$comp = _ref.comp,\n        comp = _ref$comp === void 0 ? null : _ref$comp,\n        _ref$next = _ref.next,\n        next = _ref$next === void 0 ? null : _ref$next,\n        _ref$prev = _ref.prev,\n        prev = _ref$prev === void 0 ? null : _ref$prev;\n\n    _classCallCheck(this, Measure);\n\n    this.comp = comp;\n    this.next = next;\n    this.prev = prev;\n    this.beatsLeft = this.comp.bpm;\n  }\n  /**\n   * \n   * @param {Chord} chord \n   */\n\n\n  _createClass(Measure, [{\n    key: \"canAddChord\",\n    value: function canAddChord(chord, position) {\n      return chord.duration <= this.beatsLeft;\n    }\n    /**\n     * Adds a chord at a given position. If a chord is added at a \n     * position already occupied by a chord and the two chords have, \n     * the same duration, then the original chord will be replaced.\n     * If they do not have the same duration, then any subsequent chords\n     * in the measure may be removed if they cause the measure to overflow.\n     * @param {*} chord \n     * @param {*} position - defaults to the end of the measure\n     */\n\n  }, {\n    key: \"addChord\",\n    value: function addChord(chord, position) {// If you try to add a chord that exceeds the total beats, \n      // then it will throw an error if there is a next measure\n      // otherwise a new measure will be added\n    }\n  }]);\n\n  return Measure;\n}();\n\nvar Composition =\n/*#__PURE__*/\nfunction () {\n  function Composition() {\n    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref2$bpm = _ref2.bpm,\n        bpm = _ref2$bpm === void 0 ? 4 / 4 : _ref2$bpm;\n\n    _classCallCheck(this, Composition);\n  }\n\n  _createClass(Composition, [{\n    key: \"addMeasure\",\n    value: function addMeasure(data) {\n      var measure = new Measure(_objectSpread({\n        comp: this\n      }, data));\n      return measure;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {} // smaller filesize but more client-side work\n\n  }, {\n    key: \"toSimplifiedJSON\",\n    value: function toSimplifiedJSON() {}\n  }]);\n\n  return Composition;\n}();\n\nvar _default = new (\n/*#__PURE__*/\nfunction () {\n  function _class() {\n    _classCallCheck(this, _class);\n  }\n\n  _createClass(_class, [{\n    key: \"parseText\",\n\n    /** \n     * Parse String -> JSON -> Composition\n     */\n    value: function parseText(text) {\n      return this.parseJSON((0, _parser.parse2)(text));\n    }\n    /**\n     * parse JSON string/obj -> Composition\n     */\n\n  }, {\n    key: \"parseJSON\",\n    value: function parseJSON(json) {\n      var composition = new Composition(); // TODO\n\n      return json;\n    }\n  }, {\n    key: \"parseSimplifiedJSON\",\n    value: function parseSimplifiedJSON() {}\n  }]);\n\n  return _class;\n}())();\n\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIk5vdGUiLCJDaG9yZCIsIm1lYXN1cmUiLCJzdGFmZiIsIm5vdGVzIiwiZHVyYXRpb24iLCJNZWFzdXJlIiwiY29tcCIsIm5leHQiLCJwcmV2IiwiYmVhdHNMZWZ0IiwiYnBtIiwiY2hvcmQiLCJwb3NpdGlvbiIsIkNvbXBvc2l0aW9uIiwiZGF0YSIsInRleHQiLCJwYXJzZUpTT04iLCJqc29uIiwiY29tcG9zaXRpb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7SUFFTUEsSTs7O0FBQ0osa0JBQWE7QUFBQTtBQUFFOzs7O2dDQUNKLENBQUU7Ozs7O0FBR2Y7Ozs7O0lBR01DLEssR0FDSixpQkFBYTtBQUFBOztBQUNYLE9BQUtDLE9BQUwsR0FBZSxJQUFmO0FBQ0EsT0FBS0MsS0FBTCxHQUFhLElBQWI7QUFDQSxPQUFLQyxLQUFMLEdBQWEsRUFBYjtBQUNBLE9BQUtDLFFBQUwsR0FBZ0IsQ0FBaEI7QUFDRCxDOztJQUdHQyxPOzs7QUFDSix5QkFJRTtBQUFBLHlCQUhBQyxJQUdBO0FBQUEsUUFIQUEsSUFHQSwwQkFITyxJQUdQO0FBQUEseUJBRkFDLElBRUE7QUFBQSxRQUZBQSxJQUVBLDBCQUZPLElBRVA7QUFBQSx5QkFEQUMsSUFDQTtBQUFBLFFBREFBLElBQ0EsMEJBRE8sSUFDUDs7QUFBQTs7QUFDQSxTQUFLRixJQUFMLEdBQVlBLElBQVo7QUFDQSxTQUFLQyxJQUFMLEdBQVlBLElBQVo7QUFDQSxTQUFLQyxJQUFMLEdBQVlBLElBQVo7QUFDQSxTQUFLQyxTQUFMLEdBQWlCLEtBQUtILElBQUwsQ0FBVUksR0FBM0I7QUFDRDtBQUNEOzs7Ozs7OztnQ0FJWUMsSyxFQUFPQyxRLEVBQVM7QUFDMUIsYUFBT0QsS0FBSyxDQUFDUCxRQUFOLElBQWtCLEtBQUtLLFNBQTlCO0FBQ0Q7QUFDRDs7Ozs7Ozs7Ozs7OzZCQVNTRSxLLEVBQU9DLFEsRUFBUyxDQUN2QjtBQUNBO0FBQ0E7QUFDRDs7Ozs7O0lBR0dDLFc7OztBQUNKLHlCQUVPO0FBQUEsb0ZBQUgsRUFBRztBQUFBLDBCQURMSCxHQUNLO0FBQUEsUUFETEEsR0FDSywwQkFEQyxJQUFFLENBQ0g7O0FBQUE7QUFFTjs7OzsrQkFFVUksSSxFQUFLO0FBQ2QsVUFBTWIsT0FBTyxHQUFHLElBQUlJLE9BQUo7QUFDZEMsUUFBQUEsSUFBSSxFQUFFO0FBRFEsU0FFWFEsSUFGVyxFQUFoQjtBQUlBLGFBQU9iLE9BQVA7QUFDRDs7OzZCQUVPLENBQUUsQyxDQUNWOzs7O3VDQUNrQixDQUFFOzs7Ozs7ZUFHUDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFDYjs7O0FBRGEsOEJBSUhjLElBSkcsRUFJRTtBQUNiLGFBQU8sS0FBS0MsU0FBTCxDQUFlLG9CQUFNRCxJQUFOLENBQWYsQ0FBUDtBQUNEO0FBQ0Q7Ozs7QUFQYTtBQUFBO0FBQUEsOEJBVUhFLElBVkcsRUFVRTtBQUNiLFVBQU1DLFdBQVcsR0FBRyxJQUFJTCxXQUFKLEVBQXBCLENBRGEsQ0FFYjs7QUFDQSxhQUFPSSxJQUFQO0FBQ0Q7QUFkWTtBQUFBO0FBQUEsMENBZ0JRLENBQUU7QUFoQlY7O0FBQUE7QUFBQSxNIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9raGF1cmkvRG9jdW1lbnRzL05GVC9zcmMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZTIgYXMgcGFyc2UgfSBmcm9tICcuL3BhcnNlcidcblxuY2xhc3MgTm90ZSB7XG4gIGNvbnN0cnVjdG9yKCl7fVxuICB0cmFuc3Bvc2UoKXt9XG59XG5cbi8qKlxuICogQSBDaG9yZCBjb25zaXN0cyBvZiBvbmUgb3IgbW9yZSBub3RlcyBwbGF5ZWQgc2ltdWx0YW5lb3VzbHlcbiAqL1xuY2xhc3MgQ2hvcmQge1xuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHRoaXMubWVhc3VyZSA9IG51bGwgXG4gICAgdGhpcy5zdGFmZiA9IG51bGxcbiAgICB0aGlzLm5vdGVzID0gW11cbiAgICB0aGlzLmR1cmF0aW9uID0gMVxuICB9XG59XG5cbmNsYXNzIE1lYXN1cmUge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgY29tcCA9IG51bGwsXG4gICAgbmV4dCA9IG51bGwsIFxuICAgIHByZXYgPSBudWxsXG4gIH0pe1xuICAgIHRoaXMuY29tcCA9IGNvbXBcbiAgICB0aGlzLm5leHQgPSBuZXh0XG4gICAgdGhpcy5wcmV2ID0gcHJldlxuICAgIHRoaXMuYmVhdHNMZWZ0ID0gdGhpcy5jb21wLmJwbVxuICB9XG4gIC8qKlxuICAgKiBcbiAgICogQHBhcmFtIHtDaG9yZH0gY2hvcmQgXG4gICAqL1xuICBjYW5BZGRDaG9yZChjaG9yZCwgcG9zaXRpb24pe1xuICAgIHJldHVybiBjaG9yZC5kdXJhdGlvbiA8PSB0aGlzLmJlYXRzTGVmdFxuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgY2hvcmQgYXQgYSBnaXZlbiBwb3NpdGlvbi4gSWYgYSBjaG9yZCBpcyBhZGRlZCBhdCBhIFxuICAgKiBwb3NpdGlvbiBhbHJlYWR5IG9jY3VwaWVkIGJ5IGEgY2hvcmQgYW5kIHRoZSB0d28gY2hvcmRzIGhhdmUsIFxuICAgKiB0aGUgc2FtZSBkdXJhdGlvbiwgdGhlbiB0aGUgb3JpZ2luYWwgY2hvcmQgd2lsbCBiZSByZXBsYWNlZC5cbiAgICogSWYgdGhleSBkbyBub3QgaGF2ZSB0aGUgc2FtZSBkdXJhdGlvbiwgdGhlbiBhbnkgc3Vic2VxdWVudCBjaG9yZHNcbiAgICogaW4gdGhlIG1lYXN1cmUgbWF5IGJlIHJlbW92ZWQgaWYgdGhleSBjYXVzZSB0aGUgbWVhc3VyZSB0byBvdmVyZmxvdy5cbiAgICogQHBhcmFtIHsqfSBjaG9yZCBcbiAgICogQHBhcmFtIHsqfSBwb3NpdGlvbiAtIGRlZmF1bHRzIHRvIHRoZSBlbmQgb2YgdGhlIG1lYXN1cmVcbiAgICovXG4gIGFkZENob3JkKGNob3JkLCBwb3NpdGlvbil7XG4gICAgLy8gSWYgeW91IHRyeSB0byBhZGQgYSBjaG9yZCB0aGF0IGV4Y2VlZHMgdGhlIHRvdGFsIGJlYXRzLCBcbiAgICAvLyB0aGVuIGl0IHdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgdGhlcmUgaXMgYSBuZXh0IG1lYXN1cmVcbiAgICAvLyBvdGhlcndpc2UgYSBuZXcgbWVhc3VyZSB3aWxsIGJlIGFkZGVkXG4gIH1cbn1cblxuY2xhc3MgQ29tcG9zaXRpb24ge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgYnBtID0gNC80XG4gIH0gPSB7fSl7XG5cbiAgfVxuXG4gIGFkZE1lYXN1cmUoZGF0YSl7XG4gICAgY29uc3QgbWVhc3VyZSA9IG5ldyBNZWFzdXJlKHtcbiAgICAgIGNvbXA6IHRoaXMsIFxuICAgICAgLi4uZGF0YVxuICAgIH0pXG4gICAgcmV0dXJuIG1lYXN1cmVcbiAgfVxuXG4gIHRvSlNPTigpe31cbiAgLy8gc21hbGxlciBmaWxlc2l6ZSBidXQgbW9yZSBjbGllbnQtc2lkZSB3b3JrXG4gIHRvU2ltcGxpZmllZEpTT04oKXt9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBjbGFzcyB7XG4gIC8qKiBcbiAgICogUGFyc2UgU3RyaW5nIC0+IEpTT04gLT4gQ29tcG9zaXRpb25cbiAgICovXG4gIHBhcnNlVGV4dCh0ZXh0KXtcbiAgICByZXR1cm4gdGhpcy5wYXJzZUpTT04ocGFyc2UodGV4dCkpXG4gIH1cbiAgLyoqXG4gICAqIHBhcnNlIEpTT04gc3RyaW5nL29iaiAtPiBDb21wb3NpdGlvblxuICAgKi9cbiAgcGFyc2VKU09OKGpzb24pe1xuICAgIGNvbnN0IGNvbXBvc2l0aW9uID0gbmV3IENvbXBvc2l0aW9uKClcbiAgICAvLyBUT0RPXG4gICAgcmV0dXJuIGpzb25cbiAgfVxuICBcbiAgcGFyc2VTaW1wbGlmaWVkSlNPTigpe31cbn1cbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "Note",
        "Chord",
        "measure",
        "staff",
        "notes",
        "duration",
        "Measure",
        "comp",
        "next",
        "prev",
        "beatsLeft",
        "bpm",
        "chord",
        "position",
        "Composition",
        "data",
        "text",
        "parseJSON",
        "json",
        "composition"
      ],
      "mappings": ";;;;;;;AAAA;;;;;;;;;;;;;;IAEMA,I;;;AACJ,kBAAa;AAAA;AAAE;;;;gCACJ,CAAE;;;;;AAGf;;;;;IAGMC,K,GACJ,iBAAa;AAAA;;AACX,OAAKC,OAAL,GAAe,IAAf;AACA,OAAKC,KAAL,GAAa,IAAb;AACA,OAAKC,KAAL,GAAa,EAAb;AACA,OAAKC,QAAL,GAAgB,CAAhB;AACD,C;;IAGGC,O;;;AACJ,yBAIE;AAAA,yBAHAC,IAGA;AAAA,QAHAA,IAGA,0BAHO,IAGP;AAAA,yBAFAC,IAEA;AAAA,QAFAA,IAEA,0BAFO,IAEP;AAAA,yBADAC,IACA;AAAA,QADAA,IACA,0BADO,IACP;;AAAA;;AACA,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,SAAL,GAAiB,KAAKH,IAAL,CAAUI,GAA3B;AACD;AACD;;;;;;;;gCAIYC,K,EAAOC,Q,EAAS;AAC1B,aAAOD,KAAK,CAACP,QAAN,IAAkB,KAAKK,SAA9B;AACD;AACD;;;;;;;;;;;;6BASSE,K,EAAOC,Q,EAAS,CACvB;AACA;AACA;AACD;;;;;;IAGGC,W;;;AACJ,yBAEO;AAAA,oFAAH,EAAG;AAAA,0BADLH,GACK;AAAA,QADLA,GACK,0BADC,IAAE,CACH;;AAAA;AAEN;;;;+BAEUI,I,EAAK;AACd,UAAMb,OAAO,GAAG,IAAII,OAAJ;AACdC,QAAAA,IAAI,EAAE;AADQ,SAEXQ,IAFW,EAAhB;AAIA,aAAOb,OAAP;AACD;;;6BAEO,CAAE,C,CACV;;;;uCACkB,CAAE;;;;;;eAGP;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACb;;;AADa,8BAIHc,IAJG,EAIE;AACb,aAAO,KAAKC,SAAL,CAAe,oBAAMD,IAAN,CAAf,CAAP;AACD;AACD;;;;AAPa;AAAA;AAAA,8BAUHE,IAVG,EAUE;AACb,UAAMC,WAAW,GAAG,IAAIL,WAAJ,EAApB,CADa,CAEb;;AACA,aAAOI,IAAP;AACD;AAdY;AAAA;AAAA,0CAgBQ,CAAE;AAhBV;;AAAA;AAAA,M",
      "sourceRoot": "/Users/khauri/Documents/NFT/src",
      "sourcesContent": [
        "import { parse2 as parse } from './parser'\n\nclass Note {\n  constructor(){}\n  transpose(){}\n}\n\n/**\n * A Chord consists of one or more notes played simultaneously\n */\nclass Chord {\n  constructor(){\n    this.measure = null \n    this.staff = null\n    this.notes = []\n    this.duration = 1\n  }\n}\n\nclass Measure {\n  constructor({\n    comp = null,\n    next = null, \n    prev = null\n  }){\n    this.comp = comp\n    this.next = next\n    this.prev = prev\n    this.beatsLeft = this.comp.bpm\n  }\n  /**\n   * \n   * @param {Chord} chord \n   */\n  canAddChord(chord, position){\n    return chord.duration <= this.beatsLeft\n  }\n  /**\n   * Adds a chord at a given position. If a chord is added at a \n   * position already occupied by a chord and the two chords have, \n   * the same duration, then the original chord will be replaced.\n   * If they do not have the same duration, then any subsequent chords\n   * in the measure may be removed if they cause the measure to overflow.\n   * @param {*} chord \n   * @param {*} position - defaults to the end of the measure\n   */\n  addChord(chord, position){\n    // If you try to add a chord that exceeds the total beats, \n    // then it will throw an error if there is a next measure\n    // otherwise a new measure will be added\n  }\n}\n\nclass Composition {\n  constructor({\n    bpm = 4/4\n  } = {}){\n\n  }\n\n  addMeasure(data){\n    const measure = new Measure({\n      comp: this, \n      ...data\n    })\n    return measure\n  }\n\n  toJSON(){}\n  // smaller filesize but more client-side work\n  toSimplifiedJSON(){}\n}\n\nexport default new class {\n  /** \n   * Parse String -> JSON -> Composition\n   */\n  parseText(text){\n    return this.parseJSON(parse(text))\n  }\n  /**\n   * parse JSON string/obj -> Composition\n   */\n  parseJSON(json){\n    const composition = new Composition()\n    // TODO\n    return json\n  }\n  \n  parseSimplifiedJSON(){}\n}\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1565698041107
  },
  "{\"sourceRoot\":\"/Users/khauri/Documents/NFT/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/khauri/Documents/NFT\",\"filename\":\"/Users/khauri/Documents/NFT/src/parser.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/khauri/Documents/NFT\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.5.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/khauri/Documents/NFT/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/khauri/Documents/NFT",
      "filename": "/Users/khauri/Documents/NFT/src/parser.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/khauri/Documents/NFT",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/khauri/Documents/NFT/src/parser.js",
        "plugins": [
          "dynamicImport",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/khauri/Documents/NFT/src/parser.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/khauri/Documents/NFT/src",
        "sourceFileName": "parser.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parse2 = parse2;\nexports.parse = parse;\n\nvar _constants = require(\"./constants\");\n\nvar _tokenizer = _interopRequireDefault(require(\"./tokenizer\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction retrieveChordType(type) {\n  var typeValue;\n\n  if (!(typeValue = _constants.CHORD_TYPES[type] || _constants.CHORD_TYPES[type.toUpperCase()])) {\n    throw \"Could not recognize chord type: \".concat(type);\n  }\n\n  return typeValue;\n}\n/**\n * Match a literal string\n * @param {String} literal \n */\n\n\nvar parseLiteral = function parseLiteral(literal) {\n  return function (input) {\n    var tokens = input.tokens,\n        position = input.position,\n        original = input.original,\n        consume = input.consume,\n        peek = input.peek;\n    return {};\n  };\n};\n/**\n * Matches a regex pattern\n * @param {RegExp} pattern \n */\n\n\nvar parsePattern = function parsePattern(pattern) {\n  return function (input) {\n    var _input = _slicedToArray(input, 2),\n        tokens = _input[0],\n        position = _input[1];\n  };\n};\n\nvar either = function either(parser1, parser2) {\n  return function (input) {\n    return parser1(input) || parser2(input);\n  };\n};\n\nvar maybe = function maybe(parser) {\n  return function () {};\n};\n\nvar parsers = {\n  expression: function expression(_ref) {// expression = value [op expression]\n\n    var value = _ref.value;\n  },\n  number: function number(_ref2) {\n    var value = _ref2.value;\n    return [1, {\n      type: 'NumberLiteral',\n      value: parseFloat(value)\n    }];\n  },\n  name: function name(tokens) {\n    return [1, {}];\n  },\n  operator: function operator(tokens) {\n    return [1, {}];\n  },\n  bracket: function bracket() {\n    return [1];\n  },\n  symbol: function symbol() {\n    return [1];\n  },\n  separator: function separator() {\n    return [1];\n  },\n  word: function word() {\n    return [1];\n  },\n  lyric: function lyric() {\n    return [1];\n  }\n};\n\nvar parseProgram = function parseProgram(tokens) {\n  var ast = {\n    type: 'Composition',\n    body: []\n  };\n\n  while (tokens.pos < tokens.length()) {\n    var token = tokens.peek();\n\n    if (!token || !parsers[token.type]) {\n      throw TypeError(\"Unrecognized Token Type: \".concat(token.type));\n    }\n\n    var data = parsers[token.type](token);\n\n    var _ref3 = data || [],\n        _ref4 = _slicedToArray(_ref3, 2),\n        consumed = _ref4[0],\n        node = _ref4[1];\n\n    if (!consumed) {\n      throw Error(\"Token was not consumed by any parser for type \".concat(token.type));\n    }\n\n    tokens.inc(consumed);\n    ast.body.push(node);\n  }\n};\n/**\n * \n * @param {String} input \n */\n\n\nfunction parse2(input) {\n  var tokens = (0, _tokenizer[\"default\"])(input);\n  console.log(tokens);\n  parseProgram(tokens);\n}\n/**\n * grammar:\n * DIGIT  = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9\n * NUMBER = DIGIT+\n * NOTE   = (A  | B | C | D | E | F | G) [ACC] [NUMBER] | R\n * ACC    = # | s | b \n * TYPE   = MAJ | M | MIN | m | ...\n * CHORD  = NOTE [TYPE] [/ NUMBER] | {NOTE [, NOTE]}\n * SONG   = CHORDS+\n * \n * Example: Cadd9/2 \n * @param {*} text \n */\n\n\nfunction parse(text) {\n  // replace one or more spaces with one space\n  var tokens = text.replace(/\\s+/, \" \").split(\"\");\n  var pos = 0;\n\n  var peek = function peek() {\n    return tokens[pos] || '';\n  };\n\n  var consume = function consume() {\n    return tokens[pos++];\n  };\n\n  function parseWhiteSpace() {\n    while (/\\s/.test(peek())) {\n      consume();\n    }\n  }\n\n  var parseNumber = function parseNumber() {\n    var digitStr = '';\n\n    while (/\\d/.test(peek())) {\n      digitStr += consume();\n    }\n\n    return parseFloat(digitStr);\n  };\n\n  var parseAccidental = function parseAccidental() {\n    var result = {\n      isAccidental: false,\n      accidental: \"\"\n    };\n\n    if (/[#bs]/i.test(peek())) {\n      result.isAccidental = true;\n      result.accidental = consume();\n    }\n\n    return result;\n  };\n\n  var parseOctave = function parseOctave() {\n    var result = {\n      octave: 4\n    };\n    var octave = parseNumber();\n\n    if (!isNaN(octave)) {\n      result.octave = octave;\n    }\n\n    return result;\n  };\n\n  var parseNote = function parseNote() {\n    if (!/[a-gr]/i.test(peek())) {\n      throw \"unrecognized root note name: \".concat(peek());\n    }\n\n    var name = consume().toUpperCase();\n    var accidental = parseAccidental();\n\n    if (accidental.isAccidental) {\n      name += accidental.accidental;\n    }\n\n    return _objectSpread({\n      name: name\n    }, accidental, {}, parseOctave());\n  };\n\n  function parseChord() {\n    var parseType = function parseType() {\n      var typeStr = '';\n\n      while (/[\\w]/i.test(peek())) {\n        typeStr += consume();\n      }\n\n      return {\n        type: typeStr ? retrieveChordType(typeStr) : _constants.CHORD_TYPES.MAJOR\n      };\n    };\n\n    var parseDuration = function parseDuration() {\n      var result = {\n        duration: 1\n      };\n\n      if (peek() === '/') {\n        consume();\n        result.duration = 1 / parseNumber();\n      }\n\n      return result;\n    };\n\n    return _objectSpread({\n      root: parseNote()\n    }, parseType(), {}, parseDuration());\n  }\n\n  function parseNoteGroup() {\n    var notes = [];\n\n    if (/{/.test(peek())) {\n      while (!/}/.test(peek())) {\n        // consume any non alpha-numerics (separators, whitespace, etc.)\n        while (/[\\W_]/.test(peek())) {\n          consume();\n        }\n\n        notes.push(parseNote());\n      }\n\n      parseWhiteSpace();\n      consume(); // consume final }\n    }\n\n    return notes.length ? notes : null;\n  } // 1. TODO: lexical analysis to distinguish chords from lyrics\n\n\n  var chords = [];\n\n  while (peek()) {\n    parseWhiteSpace();\n    var chord = null;\n\n    if (chord = parseNoteGroup()) {\n      chords.push(chord);\n    } else if (chord = parseChord()) {\n      chords.push(chord);\n    }\n  }\n\n  console.log(chords);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "parser.js"
      ],
      "names": [
        "retrieveChordType",
        "type",
        "typeValue",
        "CHORD_TYPES",
        "toUpperCase",
        "parseLiteral",
        "literal",
        "input",
        "tokens",
        "position",
        "original",
        "consume",
        "peek",
        "parsePattern",
        "pattern",
        "either",
        "parser1",
        "parser2",
        "maybe",
        "parser",
        "parsers",
        "expression",
        "value",
        "number",
        "parseFloat",
        "name",
        "operator",
        "bracket",
        "symbol",
        "separator",
        "word",
        "lyric",
        "parseProgram",
        "ast",
        "body",
        "pos",
        "length",
        "token",
        "TypeError",
        "data",
        "consumed",
        "node",
        "Error",
        "inc",
        "push",
        "parse2",
        "console",
        "log",
        "parse",
        "text",
        "replace",
        "split",
        "parseWhiteSpace",
        "test",
        "parseNumber",
        "digitStr",
        "parseAccidental",
        "result",
        "isAccidental",
        "accidental",
        "parseOctave",
        "octave",
        "isNaN",
        "parseNote",
        "parseChord",
        "parseType",
        "typeStr",
        "MAJOR",
        "parseDuration",
        "duration",
        "root",
        "parseNoteGroup",
        "notes",
        "chords",
        "chord"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/khauri/Documents/NFT/src",
      "sourcesContent": [
        "import { CHORD_TYPES } from './constants'\nimport tokenize from './tokenizer'\n\nfunction retrieveChordType(type){\n  let typeValue\n  if(!(typeValue = CHORD_TYPES[type] || CHORD_TYPES[type.toUpperCase()])){\n    throw `Could not recognize chord type: ${type}`\n  }\n  return typeValue\n}\n\n/**\n * Match a literal string\n * @param {String} literal \n */\nconst parseLiteral = (literal) => (input) => {\n  const {tokens, position, original, consume, peek} = input\n  return {\n\n  }\n}\n/**\n * Matches a regex pattern\n * @param {RegExp} pattern \n */\nconst parsePattern = (pattern) => (input) => {\n  const [tokens, position] = input \n}\n\nconst either = (parser1, parser2) => (input) => parser1(input) || parser2(input)\n\nconst maybe = (parser) => () => {}\n\nconst parsers = {\n  expression : function({value}){\n    // expression = value [op expression]\n  },\n  number : function({value}){\n    return [1, { type : 'NumberLiteral', value : parseFloat(value) }]\n  },\n  name : function(tokens){\n    return [1,{}]\n  },\n  operator : function(tokens){\n    return [1,{}]\n  },\n  bracket : function(){return [1]},\n  symbol  : function(){return [1]},\n  separator : function(){return [1]},\n  word : function(){return [1]},\n  lyric : function(){return [1]}\n}\n\nconst parseProgram = (tokens) => {\n  const ast = {\n    type : 'Composition',\n    body : []\n  }\n\n  while(tokens.pos < tokens.length()){\n    const token = tokens.peek()\n    if(!token || !parsers[token.type]){\n      throw TypeError(`Unrecognized Token Type: ${token.type}`)\n    }\n    const data = parsers[token.type](token)\n    const [consumed, node] = (data || [])\n    if(!consumed){\n      throw Error(`Token was not consumed by any parser for type ${token.type}`)\n    }\n    tokens.inc(consumed)\n    ast.body.push(node)\n  }\n}\n\n/**\n * \n * @param {String} input \n */\nexport function parse2(input){\n  const tokens = tokenize(input)\n  console.log(tokens)\n  parseProgram(tokens)\n}\n/**\n * grammar:\n * DIGIT  = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9\n * NUMBER = DIGIT+\n * NOTE   = (A  | B | C | D | E | F | G) [ACC] [NUMBER] | R\n * ACC    = # | s | b \n * TYPE   = MAJ | M | MIN | m | ...\n * CHORD  = NOTE [TYPE] [/ NUMBER] | {NOTE [, NOTE]}\n * SONG   = CHORDS+\n * \n * Example: Cadd9/2 \n * @param {*} text \n */\nexport function parse(text){\n  // replace one or more spaces with one space\n  const tokens = text.replace(/\\s+/,\" \").split(\"\")\n  let pos = 0\n  const peek = () => tokens[pos] || ''\n  const consume = () => tokens[pos++]\n\n  function parseWhiteSpace () {\n    while(/\\s/.test(peek())){\n      consume()\n    }\n  }\n\n  const parseNumber = () => {\n    let digitStr = ''\n    while(/\\d/.test(peek())){\n      digitStr += consume()\n    }\n    return parseFloat(digitStr)\n  }\n\n  const parseAccidental = () => {\n    const result = {\n      isAccidental : false,\n      accidental : \"\"\n    }\n    if(/[#bs]/i.test(peek())){\n      result.isAccidental = true \n      result.accidental = consume()\n    }\n    return result\n  }\n\n  const parseOctave = () => {\n    const result = {\n      octave : 4\n    }\n    const octave = parseNumber()\n    if(!isNaN(octave)){\n      result.octave = octave\n    }\n    return result\n  }\n\n  const parseNote = () => {\n    if( !(/[a-gr]/i.test(peek())) ){\n      throw `unrecognized root note name: ${peek()}`\n    }\n    let name = consume().toUpperCase()\n    const accidental = parseAccidental()\n    if(accidental.isAccidental){\n      name += accidental.accidental\n    }\n    return { \n      name,\n      ...accidental,\n      ...parseOctave(),\n    }\n  }\n\n  function parseChord(){\n    const parseType = () => {\n      let typeStr = ''\n      while(/[\\w]/i.test(peek())){\n        typeStr += consume()\n      }\n      return {\n        type : typeStr ? retrieveChordType(typeStr) : CHORD_TYPES.MAJOR\n      }\n    }\n  \n    const parseDuration = () => {\n      const result = {\n        duration : 1\n      }\n      if(peek() === '/'){\n        consume()\n        result.duration = 1 / parseNumber()\n      }\n      return result\n    }\n  \n    return {\n      root : parseNote(),\n      ...parseType(),\n      ...parseDuration()\n    }\n  }\n\n  function parseNoteGroup(){\n    const notes = []\n    if(/{/.test(peek())){\n      while(!/}/.test(peek())){\n        // consume any non alpha-numerics (separators, whitespace, etc.)\n        while(/[\\W_]/.test(peek())) consume()\n        notes.push(parseNote())\n      }\n      parseWhiteSpace()\n      consume() // consume final }\n    }\n    return notes.length ? notes : null\n  }\n  // 1. TODO: lexical analysis to distinguish chords from lyrics\n  const chords = []\n  while(peek()){\n    parseWhiteSpace()\n    let chord = null\n    if(chord = parseNoteGroup()){\n      chords.push(chord)\n    }else if(chord = parseChord()){\n      chords.push(chord)\n    }\n  }\n  console.log(chords)\n}\n\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1565721192073
  },
  "{\"sourceRoot\":\"/Users/khauri/Documents/NFT/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/khauri/Documents/NFT\",\"filename\":\"/Users/khauri/Documents/NFT/src/constants.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/khauri/Documents/NFT\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.5.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/khauri/Documents/NFT/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/khauri/Documents/NFT",
      "filename": "/Users/khauri/Documents/NFT/src/constants.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/khauri/Documents/NFT",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/khauri/Documents/NFT/src/constants.js",
        "plugins": [
          "dynamicImport",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/khauri/Documents/NFT/src/constants.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/khauri/Documents/NFT/src",
        "sourceFileName": "constants.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CHORD_TYPES = exports.CLEFS = void 0;\nvar CLEFS = {\n  TREBLE: \"TREB\",\n  BASS: \"BASS\"\n};\nexports.CLEFS = CLEFS;\nvar CHORD_TYPES = expand({\n  \"Major|Maj|M\": \"MAJ\",\n  \"Minor|Min|m\": \"MIN\" // DIMINISHED : \"DIM\",\n  // MAJOR_SEVENTH : \"MAJ7\",\n  // MINOR_SEVENTH : \"MIN7\",\n  // DOMINANT_SEVENTH : \"DOM7\",\n  // SUSPENDED : \"SUS\",\n  // AUGMENTED : \"AUG\",\n  // EXTENDED : \"EXT\"\n\n});\nexports.CHORD_TYPES = CHORD_TYPES;\n\nfunction expand(dict) {\n  return Object.keys(dict).reduce(function (acc, curr) {\n    curr.split(\"|\").forEach(function (key) {\n      if (key.length > 1) {\n        acc[key.toUpperCase()] = dict[curr];\n      } else {\n        acc[key] = dict[curr];\n      }\n    });\n    return acc;\n  }, {});\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnN0YW50cy5qcyJdLCJuYW1lcyI6WyJDTEVGUyIsIlRSRUJMRSIsIkJBU1MiLCJDSE9SRF9UWVBFUyIsImV4cGFuZCIsImRpY3QiLCJPYmplY3QiLCJrZXlzIiwicmVkdWNlIiwiYWNjIiwiY3VyciIsInNwbGl0IiwiZm9yRWFjaCIsImtleSIsImxlbmd0aCIsInRvVXBwZXJDYXNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBTyxJQUFNQSxLQUFLLEdBQUc7QUFDbkJDLEVBQUFBLE1BQU0sRUFBRyxNQURVO0FBRW5CQyxFQUFBQSxJQUFJLEVBQUs7QUFGVSxDQUFkOztBQUtBLElBQU1DLFdBQVcsR0FBR0MsTUFBTSxDQUFDO0FBQ2hDLGlCQUFnQixLQURnQjtBQUVoQyxpQkFBZ0IsS0FGZ0IsQ0FHaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBVGdDLENBQUQsQ0FBMUI7OztBQVlQLFNBQVNBLE1BQVQsQ0FBZ0JDLElBQWhCLEVBQXFCO0FBQ25CLFNBQU9DLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZRixJQUFaLEVBQWtCRyxNQUFsQixDQUF5QixVQUFDQyxHQUFELEVBQU1DLElBQU4sRUFBYTtBQUMzQ0EsSUFBQUEsSUFBSSxDQUFDQyxLQUFMLENBQVcsR0FBWCxFQUFnQkMsT0FBaEIsQ0FDRSxVQUFBQyxHQUFHLEVBQUU7QUFDSCxVQUFHQSxHQUFHLENBQUNDLE1BQUosR0FBYSxDQUFoQixFQUFrQjtBQUNoQkwsUUFBQUEsR0FBRyxDQUFDSSxHQUFHLENBQUNFLFdBQUosRUFBRCxDQUFILEdBQXlCVixJQUFJLENBQUNLLElBQUQsQ0FBN0I7QUFDRCxPQUZELE1BRUs7QUFDSEQsUUFBQUEsR0FBRyxDQUFDSSxHQUFELENBQUgsR0FBU1IsSUFBSSxDQUFDSyxJQUFELENBQWI7QUFDRDtBQUNGLEtBUEg7QUFRQSxXQUFPRCxHQUFQO0FBQ0QsR0FWTSxFQVVMLEVBVkssQ0FBUDtBQVdEIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9raGF1cmkvRG9jdW1lbnRzL05GVC9zcmMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgQ0xFRlMgPSB7XG4gIFRSRUJMRSA6IFwiVFJFQlwiLFxuICBCQVNTICAgOiBcIkJBU1NcIlxufVxuXG5leHBvcnQgY29uc3QgQ0hPUkRfVFlQRVMgPSBleHBhbmQoe1xuICBcIk1ham9yfE1hanxNXCIgOiBcIk1BSlwiLFxuICBcIk1pbm9yfE1pbnxtXCIgOiBcIk1JTlwiLFxuICAvLyBESU1JTklTSEVEIDogXCJESU1cIixcbiAgLy8gTUFKT1JfU0VWRU5USCA6IFwiTUFKN1wiLFxuICAvLyBNSU5PUl9TRVZFTlRIIDogXCJNSU43XCIsXG4gIC8vIERPTUlOQU5UX1NFVkVOVEggOiBcIkRPTTdcIixcbiAgLy8gU1VTUEVOREVEIDogXCJTVVNcIixcbiAgLy8gQVVHTUVOVEVEIDogXCJBVUdcIixcbiAgLy8gRVhURU5ERUQgOiBcIkVYVFwiXG59KVxuXG5mdW5jdGlvbiBleHBhbmQoZGljdCl7XG4gIHJldHVybiBPYmplY3Qua2V5cyhkaWN0KS5yZWR1Y2UoKGFjYywgY3Vycik9PntcbiAgICBjdXJyLnNwbGl0KFwifFwiKS5mb3JFYWNoKFxuICAgICAga2V5PT57XG4gICAgICAgIGlmKGtleS5sZW5ndGggPiAxKXtcbiAgICAgICAgICBhY2Nba2V5LnRvVXBwZXJDYXNlKCldID0gZGljdFtjdXJyXVxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICBhY2Nba2V5XT1kaWN0W2N1cnJdXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgcmV0dXJuIGFjY1xuICB9LHt9KVxufSJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "constants.js"
      ],
      "names": [
        "CLEFS",
        "TREBLE",
        "BASS",
        "CHORD_TYPES",
        "expand",
        "dict",
        "Object",
        "keys",
        "reduce",
        "acc",
        "curr",
        "split",
        "forEach",
        "key",
        "length",
        "toUpperCase"
      ],
      "mappings": ";;;;;;AAAO,IAAMA,KAAK,GAAG;AACnBC,EAAAA,MAAM,EAAG,MADU;AAEnBC,EAAAA,IAAI,EAAK;AAFU,CAAd;;AAKA,IAAMC,WAAW,GAAGC,MAAM,CAAC;AAChC,iBAAgB,KADgB;AAEhC,iBAAgB,KAFgB,CAGhC;AACA;AACA;AACA;AACA;AACA;AACA;;AATgC,CAAD,CAA1B;;;AAYP,SAASA,MAAT,CAAgBC,IAAhB,EAAqB;AACnB,SAAOC,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkBG,MAAlB,CAAyB,UAACC,GAAD,EAAMC,IAAN,EAAa;AAC3CA,IAAAA,IAAI,CAACC,KAAL,CAAW,GAAX,EAAgBC,OAAhB,CACE,UAAAC,GAAG,EAAE;AACH,UAAGA,GAAG,CAACC,MAAJ,GAAa,CAAhB,EAAkB;AAChBL,QAAAA,GAAG,CAACI,GAAG,CAACE,WAAJ,EAAD,CAAH,GAAyBV,IAAI,CAACK,IAAD,CAA7B;AACD,OAFD,MAEK;AACHD,QAAAA,GAAG,CAACI,GAAD,CAAH,GAASR,IAAI,CAACK,IAAD,CAAb;AACD;AACF,KAPH;AAQA,WAAOD,GAAP;AACD,GAVM,EAUL,EAVK,CAAP;AAWD",
      "sourceRoot": "/Users/khauri/Documents/NFT/src",
      "sourcesContent": [
        "export const CLEFS = {\n  TREBLE : \"TREB\",\n  BASS   : \"BASS\"\n}\n\nexport const CHORD_TYPES = expand({\n  \"Major|Maj|M\" : \"MAJ\",\n  \"Minor|Min|m\" : \"MIN\",\n  // DIMINISHED : \"DIM\",\n  // MAJOR_SEVENTH : \"MAJ7\",\n  // MINOR_SEVENTH : \"MIN7\",\n  // DOMINANT_SEVENTH : \"DOM7\",\n  // SUSPENDED : \"SUS\",\n  // AUGMENTED : \"AUG\",\n  // EXTENDED : \"EXT\"\n})\n\nfunction expand(dict){\n  return Object.keys(dict).reduce((acc, curr)=>{\n    curr.split(\"|\").forEach(\n      key=>{\n        if(key.length > 1){\n          acc[key.toUpperCase()] = dict[curr]\n        }else{\n          acc[key]=dict[curr]\n        }\n      })\n    return acc\n  },{})\n}"
      ]
    },
    "sourceType": "script",
    "mtime": 1565534986295
  },
  "{\"sourceRoot\":\"/Users/khauri/Documents/NFT/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/khauri/Documents/NFT\",\"filename\":\"/Users/khauri/Documents/NFT/src/tokenizer.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/khauri/Documents/NFT\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.5.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/khauri/Documents/NFT/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/khauri/Documents/NFT",
      "filename": "/Users/khauri/Documents/NFT/src/tokenizer.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/khauri/Documents/NFT",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/khauri/Documents/NFT/src/tokenizer.js",
        "plugins": [
          "dynamicImport",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/khauri/Documents/NFT/src/tokenizer.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/khauri/Documents/NFT/src",
        "sourceFileName": "tokenizer.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\n/**\n * Splits input into multiple lines and attemps to parse each line \n * individually. Any line not parsable is assumed to be a lyric line.\n */\nvar _default = function _default(input) {\n  var lines = input.split(/\\n/);\n  var tokens = lines.reduce(function (acc, line, lineNo) {\n    var tokens;\n\n    try {\n      tokens = tokenizeLine(line, lineNo);\n    } catch (e) {\n      tokens = [{\n        type: 'lyric',\n        value: line,\n        line: lineNo,\n        pos: 0\n      }];\n    }\n\n    return acc.concat(tokens);\n  }, []);\n  return {\n    tokens: tokens,\n    raw: input,\n    pos: 0,\n    peek: function peek() {\n      return this.tokens[this.pos];\n    },\n    inc: function inc(amount) {\n      this.pos += amount;\n    },\n    length: function length() {\n      return this.tokens.length;\n    }\n  };\n};\n\nexports[\"default\"] = _default;\n\nfunction tokenizeLine(input) {\n  var lineNo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var pos = 0;\n  var line = lineNo;\n\n  var inc = function inc(amount) {\n    return pos += amount;\n  }; // returns new position\n\n  /**\n   * Tokenize a single character\n   * @param {String} char \n   * @param {String} type \n   */\n\n\n  var tokenizeChar = function tokenizeChar(_char, type) {\n    return function () {\n      return input[pos] === _char ? [1, {\n        type: type,\n        value: _char,\n        line: line,\n        pos: pos\n      }] : null;\n    };\n  };\n  /**\n   * Tokenize multiple characters\n   * @param {String} str \n   * @param {String} type \n   */\n\n\n  var tokenizeString = function tokenizeString(str, type) {\n    return function () {\n      return input.startsWith(str, pos) ? [str.length, {\n        type: type,\n        value: str,\n        line: line,\n        pos: pos\n      }] : null;\n    };\n  };\n  /**\n   * Tokenizes a Regular Expression pattern\n   * @param {RegExp} pattern \n   * @param {String} type \n   */\n\n\n  var tokenizePattern = function tokenizePattern(pattern, type) {\n    return function () {\n      pattern.lastIndex = 0;\n      var match = pattern.exec(input.substring(pos));\n      return match && match.index === 0 ? [match[0].length, {\n        type: type,\n        value: match[0],\n        line: line,\n        pos: pos\n      }] : null;\n    };\n  };\n  /**\n   * Skip any pattern\n   * @param {RegExp} pattern \n   */\n\n\n  var skipPattern = function skipPattern(pattern) {\n    var tokenizer = tokenizePattern(pattern, null);\n    return function () {\n      var result = tokenizer();\n      return result ? [result[0], null] : null;\n    };\n  };\n\n  var skipWhiteSpace = skipPattern(/\\s+/);\n  var tokenizeOpenBracket = tokenizeChar('{', 'bracket');\n  var tokenizeCloseBracket = tokenizeChar('}', 'bracket');\n  var tokenizeNumber = tokenizePattern(/\\d+/, 'number');\n  var tokenizeSeparator = tokenizePattern(/[,|;]/, \"separator\");\n  var tokenizeOperator = tokenizePattern(/[*+\\/]/, 'operator');\n  var tokenizeValue = tokenizePattern(/[A-GR](?=[a-z]*)/, 'value');\n  var tokenizeWord = tokenizePattern(/(ad|au|di|do|fi|m|no|si|su|th)[a-z]*/i, 'word');\n  var tokenizeSymbol = tokenizePattern(/[#]/, 'symbol');\n  var tokenizers = [// TODO: skipComments\n  skipWhiteSpace, tokenizeOpenBracket, tokenizeCloseBracket, tokenizeSeparator, tokenizeOperator, tokenizeNumber, tokenizeSymbol, tokenizeValue, tokenizeWord];\n  var tokens = [];\n\n  while (pos < input.length) {\n    var wasTokenized = tokenizers.some(function (tokenizer) {\n      var result = tokenizer();\n\n      if (!result) {\n        return false;\n      }\n\n      inc(result[0]);\n      result[1] && tokens.push(result[1]);\n      return true;\n    });\n\n    if (!wasTokenized) {\n      throw Error(\"Unrecognized Token \\\"\".concat(input[pos], \"\\\" at pos \").concat(pos));\n    }\n  }\n\n  return tokens;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "tokenizer.js"
      ],
      "names": [
        "input",
        "lines",
        "split",
        "tokens",
        "reduce",
        "acc",
        "line",
        "lineNo",
        "tokenizeLine",
        "e",
        "type",
        "value",
        "pos",
        "concat",
        "raw",
        "peek",
        "inc",
        "amount",
        "length",
        "tokenizeChar",
        "char",
        "tokenizeString",
        "str",
        "startsWith",
        "tokenizePattern",
        "pattern",
        "lastIndex",
        "match",
        "exec",
        "substring",
        "index",
        "skipPattern",
        "tokenizer",
        "result",
        "skipWhiteSpace",
        "tokenizeOpenBracket",
        "tokenizeCloseBracket",
        "tokenizeNumber",
        "tokenizeSeparator",
        "tokenizeOperator",
        "tokenizeValue",
        "tokenizeWord",
        "tokenizeSymbol",
        "tokenizers",
        "wasTokenized",
        "some",
        "push",
        "Error"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/khauri/Documents/NFT/src",
      "sourcesContent": [
        "/**\n * Splits input into multiple lines and attemps to parse each line \n * individually. Any line not parsable is assumed to be a lyric line.\n */\nexport default input => {\n  const lines = input.split(/\\n/)\n  const tokens = lines.reduce((acc, line, lineNo)=>{\n    let tokens\n    try {\n      tokens = tokenizeLine(line, lineNo)\n    }catch(e){\n      tokens = [{type:'lyric', value : line, line : lineNo, pos : 0}]\n    }\n    return acc.concat(tokens)\n  }, [])\n  return {\n    tokens,\n    raw : input,\n    pos : 0,\n    peek : function(){ return this.tokens[this.pos] },\n    inc : function(amount){ this.pos += amount },\n    length : function(){ return this.tokens.length }\n  }\n}\n\nfunction tokenizeLine(input, lineNo = 0){\n  let pos = 0\n  const line = lineNo\n  const inc = (amount) => pos += amount // returns new position\n\n  /**\n   * Tokenize a single character\n   * @param {String} char \n   * @param {String} type \n   */\n  const tokenizeChar = (char, type) => () => {\n    return input[pos] === char ? [1, {type, value : char, line, pos}] : null\n  }\n\n  /**\n   * Tokenize multiple characters\n   * @param {String} str \n   * @param {String} type \n   */\n  const tokenizeString = (str, type) => () => {\n    return input.startsWith(str, pos) ? [str.length, {type, value : str, line, pos} ] : null\n  }\n\n  /**\n   * Tokenizes a Regular Expression pattern\n   * @param {RegExp} pattern \n   * @param {String} type \n   */\n  const tokenizePattern = (pattern, type) => {\n    return () => {\n      pattern.lastIndex = 0\n      const match = pattern.exec(input.substring(pos))\n      return match && match.index === 0 ? [match[0].length, {type, value:match[0], line, pos}] : null\n    }\n  }\n\n  /**\n   * Skip any pattern\n   * @param {RegExp} pattern \n   */\n  const skipPattern = (pattern) => {\n    const tokenizer = tokenizePattern(pattern, null)\n    return () => {\n      const result = tokenizer()\n      return result ? [result[0], null] : null\n    }\n  }\n\n  const skipWhiteSpace = skipPattern(/\\s+/)\n  const tokenizeOpenBracket = tokenizeChar('{', 'bracket')\n  const tokenizeCloseBracket = tokenizeChar('}', 'bracket')\n  const tokenizeNumber = tokenizePattern(/\\d+/, 'number')\n  const tokenizeSeparator = tokenizePattern(/[,|;]/, \"separator\")\n  const tokenizeOperator = tokenizePattern(/[*+\\/]/, 'operator')\n  const tokenizeValue = tokenizePattern(/[A-GR](?=[a-z]*)/, 'value')\n  const tokenizeWord = tokenizePattern(/(ad|au|di|do|fi|m|no|si|su|th)[a-z]*/i, 'word')\n  const tokenizeSymbol = tokenizePattern(/[#]/, 'symbol')\n\n  const tokenizers = [\n    // TODO: skipComments\n    skipWhiteSpace,\n    tokenizeOpenBracket,\n    tokenizeCloseBracket,\n    tokenizeSeparator,\n    tokenizeOperator,\n    tokenizeNumber,\n    tokenizeSymbol,\n    tokenizeValue,\n    tokenizeWord,\n  ]\n\n  const tokens = []\n\n  while(pos < input.length){\n    const wasTokenized = tokenizers.some((tokenizer)=>{\n      const result = tokenizer()\n      if(!result){\n        return false\n      }\n      inc(result[0])\n      result[1] && tokens.push(result[1])\n      return true\n    })\n    if(!wasTokenized){\n      throw Error(`Unrecognized Token \"${input[pos]}\" at pos ${pos}`)\n    }\n  }\n\n  return tokens\n}"
      ]
    },
    "sourceType": "script",
    "mtime": 1565721148519
  }
}