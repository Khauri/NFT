{
  "{\"sourceRoot\":\"/Users/khauri/Documents/NFT\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/khauri/Documents/NFT\",\"filename\":\"/Users/khauri/Documents/NFT/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/khauri/Documents/NFT\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.5.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/khauri/Documents/NFT",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/khauri/Documents/NFT",
      "filename": "/Users/khauri/Documents/NFT/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/khauri/Documents/NFT",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/khauri/Documents/NFT/index.js",
        "plugins": [
          "dynamicImport",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/khauri/Documents/NFT/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/khauri/Documents/NFT",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _src = _interopRequireDefault(require(\"./src\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n_src[\"default\"].parseText(\"3*{C#5,B,D}/3 EMin;  GMaj  DMaj/5  Cmaj\");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIk5GVCIsInBhcnNlVGV4dCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztBQUVBQSxnQkFBSUMsU0FBSixDQUFjLHlDQUFkIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9raGF1cmkvRG9jdW1lbnRzL05GVCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBORlQgZnJvbSAnLi9zcmMnXG5cbk5GVC5wYXJzZVRleHQoXCIzKntDIzUsQixEfS8zIEVNaW47ICBHTWFqICBETWFqLzUgIENtYWpcIikiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "NFT",
        "parseText"
      ],
      "mappings": ";;AAAA;;;;AAEAA,gBAAIC,SAAJ,CAAc,yCAAd",
      "sourceRoot": "/Users/khauri/Documents/NFT",
      "sourcesContent": [
        "import NFT from './src'\n\nNFT.parseText(\"3*{C#5,B,D}/3 EMin;  GMaj  DMaj/5  Cmaj\")"
      ]
    },
    "sourceType": "script",
    "mtime": 1565703470351
  },
  "{\"sourceRoot\":\"/Users/khauri/Documents/NFT/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/khauri/Documents/NFT\",\"filename\":\"/Users/khauri/Documents/NFT/src/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/khauri/Documents/NFT\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.5.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/khauri/Documents/NFT/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/khauri/Documents/NFT",
      "filename": "/Users/khauri/Documents/NFT/src/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/khauri/Documents/NFT",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/khauri/Documents/NFT/src/index.js",
        "plugins": [
          "dynamicImport",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/khauri/Documents/NFT/src/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/khauri/Documents/NFT/src",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _parser = require(\"./parser\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Note =\n/*#__PURE__*/\nfunction () {\n  function Note() {\n    _classCallCheck(this, Note);\n  }\n\n  _createClass(Note, [{\n    key: \"transpose\",\n    value: function transpose() {}\n  }]);\n\n  return Note;\n}();\n/**\n * A Chord consists of one or more notes played simultaneously\n */\n\n\nvar Chord = function Chord() {\n  _classCallCheck(this, Chord);\n\n  this.measure = null;\n  this.staff = null;\n  this.notes = [];\n  this.duration = 1;\n};\n\nvar Measure =\n/*#__PURE__*/\nfunction () {\n  function Measure(_ref) {\n    var _ref$comp = _ref.comp,\n        comp = _ref$comp === void 0 ? null : _ref$comp,\n        _ref$next = _ref.next,\n        next = _ref$next === void 0 ? null : _ref$next,\n        _ref$prev = _ref.prev,\n        prev = _ref$prev === void 0 ? null : _ref$prev;\n\n    _classCallCheck(this, Measure);\n\n    this.comp = comp;\n    this.next = next;\n    this.prev = prev;\n    this.beatsLeft = this.comp.bpm;\n  }\n  /**\n   * \n   * @param {Chord} chord \n   */\n\n\n  _createClass(Measure, [{\n    key: \"canAddChord\",\n    value: function canAddChord(chord, position) {\n      return chord.duration <= this.beatsLeft;\n    }\n    /**\n     * Adds a chord at a given position. If a chord is added at a \n     * position already occupied by a chord and the two chords have, \n     * the same duration, then the original chord will be replaced.\n     * If they do not have the same duration, then any subsequent chords\n     * in the measure may be removed if they cause the measure to overflow.\n     * @param {*} chord \n     * @param {*} position - defaults to the end of the measure\n     */\n\n  }, {\n    key: \"addChord\",\n    value: function addChord(chord, position) {// If you try to add a chord that exceeds the total beats, \n      // then it will throw an error if there is a next measure\n      // otherwise a new measure will be added\n    }\n  }]);\n\n  return Measure;\n}();\n\nvar Composition =\n/*#__PURE__*/\nfunction () {\n  function Composition() {\n    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref2$bpm = _ref2.bpm,\n        bpm = _ref2$bpm === void 0 ? 4 / 4 : _ref2$bpm;\n\n    _classCallCheck(this, Composition);\n  }\n\n  _createClass(Composition, [{\n    key: \"addMeasure\",\n    value: function addMeasure(data) {\n      var measure = new Measure(_objectSpread({\n        comp: this\n      }, data));\n      return measure;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {} // smaller filesize but more client-side work\n\n  }, {\n    key: \"toSimplifiedJSON\",\n    value: function toSimplifiedJSON() {}\n  }]);\n\n  return Composition;\n}();\n\nvar _default = new (\n/*#__PURE__*/\nfunction () {\n  function _class() {\n    _classCallCheck(this, _class);\n  }\n\n  _createClass(_class, [{\n    key: \"parseText\",\n\n    /** \n     * Parse String -> JSON -> Composition\n     */\n    value: function parseText(text) {\n      return this.parseJSON((0, _parser.parse2)(text));\n    }\n    /**\n     * parse JSON string/obj -> Composition\n     */\n\n  }, {\n    key: \"parseJSON\",\n    value: function parseJSON(json) {\n      var composition = new Composition(); // TODO\n\n      return json;\n    }\n  }, {\n    key: \"parseSimplifiedJSON\",\n    value: function parseSimplifiedJSON() {}\n  }]);\n\n  return _class;\n}())();\n\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIk5vdGUiLCJDaG9yZCIsIm1lYXN1cmUiLCJzdGFmZiIsIm5vdGVzIiwiZHVyYXRpb24iLCJNZWFzdXJlIiwiY29tcCIsIm5leHQiLCJwcmV2IiwiYmVhdHNMZWZ0IiwiYnBtIiwiY2hvcmQiLCJwb3NpdGlvbiIsIkNvbXBvc2l0aW9uIiwiZGF0YSIsInRleHQiLCJwYXJzZUpTT04iLCJqc29uIiwiY29tcG9zaXRpb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7SUFFTUEsSTs7O0FBQ0osa0JBQWE7QUFBQTtBQUFFOzs7O2dDQUNKLENBQUU7Ozs7O0FBR2Y7Ozs7O0lBR01DLEssR0FDSixpQkFBYTtBQUFBOztBQUNYLE9BQUtDLE9BQUwsR0FBZSxJQUFmO0FBQ0EsT0FBS0MsS0FBTCxHQUFhLElBQWI7QUFDQSxPQUFLQyxLQUFMLEdBQWEsRUFBYjtBQUNBLE9BQUtDLFFBQUwsR0FBZ0IsQ0FBaEI7QUFDRCxDOztJQUdHQyxPOzs7QUFDSix5QkFJRTtBQUFBLHlCQUhBQyxJQUdBO0FBQUEsUUFIQUEsSUFHQSwwQkFITyxJQUdQO0FBQUEseUJBRkFDLElBRUE7QUFBQSxRQUZBQSxJQUVBLDBCQUZPLElBRVA7QUFBQSx5QkFEQUMsSUFDQTtBQUFBLFFBREFBLElBQ0EsMEJBRE8sSUFDUDs7QUFBQTs7QUFDQSxTQUFLRixJQUFMLEdBQVlBLElBQVo7QUFDQSxTQUFLQyxJQUFMLEdBQVlBLElBQVo7QUFDQSxTQUFLQyxJQUFMLEdBQVlBLElBQVo7QUFDQSxTQUFLQyxTQUFMLEdBQWlCLEtBQUtILElBQUwsQ0FBVUksR0FBM0I7QUFDRDtBQUNEOzs7Ozs7OztnQ0FJWUMsSyxFQUFPQyxRLEVBQVM7QUFDMUIsYUFBT0QsS0FBSyxDQUFDUCxRQUFOLElBQWtCLEtBQUtLLFNBQTlCO0FBQ0Q7QUFDRDs7Ozs7Ozs7Ozs7OzZCQVNTRSxLLEVBQU9DLFEsRUFBUyxDQUN2QjtBQUNBO0FBQ0E7QUFDRDs7Ozs7O0lBR0dDLFc7OztBQUNKLHlCQUVPO0FBQUEsb0ZBQUgsRUFBRztBQUFBLDBCQURMSCxHQUNLO0FBQUEsUUFETEEsR0FDSywwQkFEQyxJQUFFLENBQ0g7O0FBQUE7QUFFTjs7OzsrQkFFVUksSSxFQUFLO0FBQ2QsVUFBTWIsT0FBTyxHQUFHLElBQUlJLE9BQUo7QUFDZEMsUUFBQUEsSUFBSSxFQUFFO0FBRFEsU0FFWFEsSUFGVyxFQUFoQjtBQUlBLGFBQU9iLE9BQVA7QUFDRDs7OzZCQUVPLENBQUUsQyxDQUNWOzs7O3VDQUNrQixDQUFFOzs7Ozs7ZUFHUDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFDYjs7O0FBRGEsOEJBSUhjLElBSkcsRUFJRTtBQUNiLGFBQU8sS0FBS0MsU0FBTCxDQUFlLG9CQUFNRCxJQUFOLENBQWYsQ0FBUDtBQUNEO0FBQ0Q7Ozs7QUFQYTtBQUFBO0FBQUEsOEJBVUhFLElBVkcsRUFVRTtBQUNiLFVBQU1DLFdBQVcsR0FBRyxJQUFJTCxXQUFKLEVBQXBCLENBRGEsQ0FFYjs7QUFDQSxhQUFPSSxJQUFQO0FBQ0Q7QUFkWTtBQUFBO0FBQUEsMENBZ0JRLENBQUU7QUFoQlY7O0FBQUE7QUFBQSxNIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9raGF1cmkvRG9jdW1lbnRzL05GVC9zcmMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZTIgYXMgcGFyc2UgfSBmcm9tICcuL3BhcnNlcidcblxuY2xhc3MgTm90ZSB7XG4gIGNvbnN0cnVjdG9yKCl7fVxuICB0cmFuc3Bvc2UoKXt9XG59XG5cbi8qKlxuICogQSBDaG9yZCBjb25zaXN0cyBvZiBvbmUgb3IgbW9yZSBub3RlcyBwbGF5ZWQgc2ltdWx0YW5lb3VzbHlcbiAqL1xuY2xhc3MgQ2hvcmQge1xuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHRoaXMubWVhc3VyZSA9IG51bGwgXG4gICAgdGhpcy5zdGFmZiA9IG51bGxcbiAgICB0aGlzLm5vdGVzID0gW11cbiAgICB0aGlzLmR1cmF0aW9uID0gMVxuICB9XG59XG5cbmNsYXNzIE1lYXN1cmUge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgY29tcCA9IG51bGwsXG4gICAgbmV4dCA9IG51bGwsIFxuICAgIHByZXYgPSBudWxsXG4gIH0pe1xuICAgIHRoaXMuY29tcCA9IGNvbXBcbiAgICB0aGlzLm5leHQgPSBuZXh0XG4gICAgdGhpcy5wcmV2ID0gcHJldlxuICAgIHRoaXMuYmVhdHNMZWZ0ID0gdGhpcy5jb21wLmJwbVxuICB9XG4gIC8qKlxuICAgKiBcbiAgICogQHBhcmFtIHtDaG9yZH0gY2hvcmQgXG4gICAqL1xuICBjYW5BZGRDaG9yZChjaG9yZCwgcG9zaXRpb24pe1xuICAgIHJldHVybiBjaG9yZC5kdXJhdGlvbiA8PSB0aGlzLmJlYXRzTGVmdFxuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgY2hvcmQgYXQgYSBnaXZlbiBwb3NpdGlvbi4gSWYgYSBjaG9yZCBpcyBhZGRlZCBhdCBhIFxuICAgKiBwb3NpdGlvbiBhbHJlYWR5IG9jY3VwaWVkIGJ5IGEgY2hvcmQgYW5kIHRoZSB0d28gY2hvcmRzIGhhdmUsIFxuICAgKiB0aGUgc2FtZSBkdXJhdGlvbiwgdGhlbiB0aGUgb3JpZ2luYWwgY2hvcmQgd2lsbCBiZSByZXBsYWNlZC5cbiAgICogSWYgdGhleSBkbyBub3QgaGF2ZSB0aGUgc2FtZSBkdXJhdGlvbiwgdGhlbiBhbnkgc3Vic2VxdWVudCBjaG9yZHNcbiAgICogaW4gdGhlIG1lYXN1cmUgbWF5IGJlIHJlbW92ZWQgaWYgdGhleSBjYXVzZSB0aGUgbWVhc3VyZSB0byBvdmVyZmxvdy5cbiAgICogQHBhcmFtIHsqfSBjaG9yZCBcbiAgICogQHBhcmFtIHsqfSBwb3NpdGlvbiAtIGRlZmF1bHRzIHRvIHRoZSBlbmQgb2YgdGhlIG1lYXN1cmVcbiAgICovXG4gIGFkZENob3JkKGNob3JkLCBwb3NpdGlvbil7XG4gICAgLy8gSWYgeW91IHRyeSB0byBhZGQgYSBjaG9yZCB0aGF0IGV4Y2VlZHMgdGhlIHRvdGFsIGJlYXRzLCBcbiAgICAvLyB0aGVuIGl0IHdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgdGhlcmUgaXMgYSBuZXh0IG1lYXN1cmVcbiAgICAvLyBvdGhlcndpc2UgYSBuZXcgbWVhc3VyZSB3aWxsIGJlIGFkZGVkXG4gIH1cbn1cblxuY2xhc3MgQ29tcG9zaXRpb24ge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgYnBtID0gNC80XG4gIH0gPSB7fSl7XG5cbiAgfVxuXG4gIGFkZE1lYXN1cmUoZGF0YSl7XG4gICAgY29uc3QgbWVhc3VyZSA9IG5ldyBNZWFzdXJlKHtcbiAgICAgIGNvbXA6IHRoaXMsIFxuICAgICAgLi4uZGF0YVxuICAgIH0pXG4gICAgcmV0dXJuIG1lYXN1cmVcbiAgfVxuXG4gIHRvSlNPTigpe31cbiAgLy8gc21hbGxlciBmaWxlc2l6ZSBidXQgbW9yZSBjbGllbnQtc2lkZSB3b3JrXG4gIHRvU2ltcGxpZmllZEpTT04oKXt9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBjbGFzcyB7XG4gIC8qKiBcbiAgICogUGFyc2UgU3RyaW5nIC0+IEpTT04gLT4gQ29tcG9zaXRpb25cbiAgICovXG4gIHBhcnNlVGV4dCh0ZXh0KXtcbiAgICByZXR1cm4gdGhpcy5wYXJzZUpTT04ocGFyc2UodGV4dCkpXG4gIH1cbiAgLyoqXG4gICAqIHBhcnNlIEpTT04gc3RyaW5nL29iaiAtPiBDb21wb3NpdGlvblxuICAgKi9cbiAgcGFyc2VKU09OKGpzb24pe1xuICAgIGNvbnN0IGNvbXBvc2l0aW9uID0gbmV3IENvbXBvc2l0aW9uKClcbiAgICAvLyBUT0RPXG4gICAgcmV0dXJuIGpzb25cbiAgfVxuICBcbiAgcGFyc2VTaW1wbGlmaWVkSlNPTigpe31cbn1cbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "Note",
        "Chord",
        "measure",
        "staff",
        "notes",
        "duration",
        "Measure",
        "comp",
        "next",
        "prev",
        "beatsLeft",
        "bpm",
        "chord",
        "position",
        "Composition",
        "data",
        "text",
        "parseJSON",
        "json",
        "composition"
      ],
      "mappings": ";;;;;;;AAAA;;;;;;;;;;;;;;IAEMA,I;;;AACJ,kBAAa;AAAA;AAAE;;;;gCACJ,CAAE;;;;;AAGf;;;;;IAGMC,K,GACJ,iBAAa;AAAA;;AACX,OAAKC,OAAL,GAAe,IAAf;AACA,OAAKC,KAAL,GAAa,IAAb;AACA,OAAKC,KAAL,GAAa,EAAb;AACA,OAAKC,QAAL,GAAgB,CAAhB;AACD,C;;IAGGC,O;;;AACJ,yBAIE;AAAA,yBAHAC,IAGA;AAAA,QAHAA,IAGA,0BAHO,IAGP;AAAA,yBAFAC,IAEA;AAAA,QAFAA,IAEA,0BAFO,IAEP;AAAA,yBADAC,IACA;AAAA,QADAA,IACA,0BADO,IACP;;AAAA;;AACA,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,SAAL,GAAiB,KAAKH,IAAL,CAAUI,GAA3B;AACD;AACD;;;;;;;;gCAIYC,K,EAAOC,Q,EAAS;AAC1B,aAAOD,KAAK,CAACP,QAAN,IAAkB,KAAKK,SAA9B;AACD;AACD;;;;;;;;;;;;6BASSE,K,EAAOC,Q,EAAS,CACvB;AACA;AACA;AACD;;;;;;IAGGC,W;;;AACJ,yBAEO;AAAA,oFAAH,EAAG;AAAA,0BADLH,GACK;AAAA,QADLA,GACK,0BADC,IAAE,CACH;;AAAA;AAEN;;;;+BAEUI,I,EAAK;AACd,UAAMb,OAAO,GAAG,IAAII,OAAJ;AACdC,QAAAA,IAAI,EAAE;AADQ,SAEXQ,IAFW,EAAhB;AAIA,aAAOb,OAAP;AACD;;;6BAEO,CAAE,C,CACV;;;;uCACkB,CAAE;;;;;;eAGP;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACb;;;AADa,8BAIHc,IAJG,EAIE;AACb,aAAO,KAAKC,SAAL,CAAe,oBAAMD,IAAN,CAAf,CAAP;AACD;AACD;;;;AAPa;AAAA;AAAA,8BAUHE,IAVG,EAUE;AACb,UAAMC,WAAW,GAAG,IAAIL,WAAJ,EAApB,CADa,CAEb;;AACA,aAAOI,IAAP;AACD;AAdY;AAAA;AAAA,0CAgBQ,CAAE;AAhBV;;AAAA;AAAA,M",
      "sourceRoot": "/Users/khauri/Documents/NFT/src",
      "sourcesContent": [
        "import { parse2 as parse } from './parser'\n\nclass Note {\n  constructor(){}\n  transpose(){}\n}\n\n/**\n * A Chord consists of one or more notes played simultaneously\n */\nclass Chord {\n  constructor(){\n    this.measure = null \n    this.staff = null\n    this.notes = []\n    this.duration = 1\n  }\n}\n\nclass Measure {\n  constructor({\n    comp = null,\n    next = null, \n    prev = null\n  }){\n    this.comp = comp\n    this.next = next\n    this.prev = prev\n    this.beatsLeft = this.comp.bpm\n  }\n  /**\n   * \n   * @param {Chord} chord \n   */\n  canAddChord(chord, position){\n    return chord.duration <= this.beatsLeft\n  }\n  /**\n   * Adds a chord at a given position. If a chord is added at a \n   * position already occupied by a chord and the two chords have, \n   * the same duration, then the original chord will be replaced.\n   * If they do not have the same duration, then any subsequent chords\n   * in the measure may be removed if they cause the measure to overflow.\n   * @param {*} chord \n   * @param {*} position - defaults to the end of the measure\n   */\n  addChord(chord, position){\n    // If you try to add a chord that exceeds the total beats, \n    // then it will throw an error if there is a next measure\n    // otherwise a new measure will be added\n  }\n}\n\nclass Composition {\n  constructor({\n    bpm = 4/4\n  } = {}){\n\n  }\n\n  addMeasure(data){\n    const measure = new Measure({\n      comp: this, \n      ...data\n    })\n    return measure\n  }\n\n  toJSON(){}\n  // smaller filesize but more client-side work\n  toSimplifiedJSON(){}\n}\n\nexport default new class {\n  /** \n   * Parse String -> JSON -> Composition\n   */\n  parseText(text){\n    return this.parseJSON(parse(text))\n  }\n  /**\n   * parse JSON string/obj -> Composition\n   */\n  parseJSON(json){\n    const composition = new Composition()\n    // TODO\n    return json\n  }\n  \n  parseSimplifiedJSON(){}\n}\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1565698041107
  },
  "{\"sourceRoot\":\"/Users/khauri/Documents/NFT/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/khauri/Documents/NFT\",\"filename\":\"/Users/khauri/Documents/NFT/src/parser.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/khauri/Documents/NFT\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.5.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/khauri/Documents/NFT/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/khauri/Documents/NFT",
      "filename": "/Users/khauri/Documents/NFT/src/parser.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/khauri/Documents/NFT",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/khauri/Documents/NFT/src/parser.js",
        "plugins": [
          "dynamicImport",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/khauri/Documents/NFT/src/parser.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/khauri/Documents/NFT/src",
        "sourceFileName": "parser.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parse2 = parse2;\nexports.parse = parse;\n\nvar _constants = require(\"./constants\");\n\nvar _tokenizer = _interopRequireDefault(require(\"./tokenizer\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction retrieveChordType(type) {\n  var typeValue;\n\n  if (!(typeValue = _constants.CHORD_TYPES[type] || _constants.CHORD_TYPES[type.toUpperCase()])) {\n    throw \"Could not recognize chord type: \".concat(type);\n  }\n\n  return typeValue;\n}\n/**\n * Match a literal string\n * @param {String} literal \n */\n\n\nvar parseLiteral = function parseLiteral(literal) {\n  return function (input) {\n    var tokens = input.tokens,\n        position = input.position,\n        original = input.original,\n        consume = input.consume,\n        peek = input.peek;\n    return {};\n  };\n};\n/**\n * Matches a regex pattern\n * @param {RegExp} pattern \n */\n\n\nvar parsePattern = function parsePattern(pattern) {\n  return function (input) {\n    var _input = _slicedToArray(input, 2),\n        tokens = _input[0],\n        position = _input[1];\n  };\n};\n\nvar parseEither = function parseEither(parser1, parser2) {\n  return function (input) {\n    return parser1(input) || parser2(input);\n  };\n};\n\nfunction parse2(input) {\n  var tokens = (0, _tokenizer[\"default\"])(input);\n  console.log(tokens);\n}\n/**\n * grammar:\n * DIGIT  = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9\n * NUMBER = DIGIT+\n * NOTE   = (A  | B | C | D | E | F | G) [ACC] [NUMBER] | R\n * ACC    = # | s | b \n * TYPE   = MAJ | M | MIN | m | ...\n * CHORD  = NOTE [TYPE] [/ NUMBER] | {NOTE [, NOTE]}\n * SONG   = CHORDS+\n * \n * Example: Cadd9/2 \n * @param {*} text \n */\n\n\nfunction parse(text) {\n  // replace one or more spaces with one space\n  var tokens = text.replace(/\\s+/, \" \").split(\"\");\n  var pos = 0;\n\n  var peek = function peek() {\n    return tokens[pos] || '';\n  };\n\n  var consume = function consume() {\n    return tokens[pos++];\n  };\n\n  function parseWhiteSpace() {\n    while (/\\s/.test(peek())) {\n      consume();\n    }\n  }\n\n  var parseNumber = function parseNumber() {\n    var digitStr = '';\n\n    while (/\\d/.test(peek())) {\n      digitStr += consume();\n    }\n\n    return parseFloat(digitStr);\n  };\n\n  var parseAccidental = function parseAccidental() {\n    var result = {\n      isAccidental: false,\n      accidental: \"\"\n    };\n\n    if (/[#bs]/i.test(peek())) {\n      result.isAccidental = true;\n      result.accidental = consume();\n    }\n\n    return result;\n  };\n\n  var parseOctave = function parseOctave() {\n    var result = {\n      octave: 4\n    };\n    var octave = parseNumber();\n\n    if (!isNaN(octave)) {\n      result.octave = octave;\n    }\n\n    return result;\n  };\n\n  var parseNote = function parseNote() {\n    if (!/[a-gr]/i.test(peek())) {\n      throw \"unrecognized root note name: \".concat(peek());\n    }\n\n    var name = consume().toUpperCase();\n    var accidental = parseAccidental();\n\n    if (accidental.isAccidental) {\n      name += accidental.accidental;\n    }\n\n    return _objectSpread({\n      name: name\n    }, accidental, {}, parseOctave());\n  };\n\n  function parseChord() {\n    var parseType = function parseType() {\n      var typeStr = '';\n\n      while (/[\\w]/i.test(peek())) {\n        typeStr += consume();\n      }\n\n      return {\n        type: typeStr ? retrieveChordType(typeStr) : _constants.CHORD_TYPES.MAJOR\n      };\n    };\n\n    var parseDuration = function parseDuration() {\n      var result = {\n        duration: 1\n      };\n\n      if (peek() === '/') {\n        consume();\n        result.duration = 1 / parseNumber();\n      }\n\n      return result;\n    };\n\n    return _objectSpread({\n      root: parseNote()\n    }, parseType(), {}, parseDuration());\n  }\n\n  function parseNoteGroup() {\n    var notes = [];\n\n    if (/{/.test(peek())) {\n      while (!/}/.test(peek())) {\n        // consume any non alpha-numerics (separators, whitespace, etc.)\n        while (/[\\W_]/.test(peek())) {\n          consume();\n        }\n\n        notes.push(parseNote());\n      }\n\n      parseWhiteSpace();\n      consume(); // consume final }\n    }\n\n    return notes.length ? notes : null;\n  } // 1. TODO: lexical analysis to distinguish chords from lyrics\n\n\n  var chords = [];\n\n  while (peek()) {\n    parseWhiteSpace();\n    var chord = null;\n\n    if (chord = parseNoteGroup()) {\n      chords.push(chord);\n    } else if (chord = parseChord()) {\n      chords.push(chord);\n    }\n  }\n\n  console.log(chords);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "parser.js"
      ],
      "names": [
        "retrieveChordType",
        "type",
        "typeValue",
        "CHORD_TYPES",
        "toUpperCase",
        "parseLiteral",
        "literal",
        "input",
        "tokens",
        "position",
        "original",
        "consume",
        "peek",
        "parsePattern",
        "pattern",
        "parseEither",
        "parser1",
        "parser2",
        "parse2",
        "console",
        "log",
        "parse",
        "text",
        "replace",
        "split",
        "pos",
        "parseWhiteSpace",
        "test",
        "parseNumber",
        "digitStr",
        "parseFloat",
        "parseAccidental",
        "result",
        "isAccidental",
        "accidental",
        "parseOctave",
        "octave",
        "isNaN",
        "parseNote",
        "name",
        "parseChord",
        "parseType",
        "typeStr",
        "MAJOR",
        "parseDuration",
        "duration",
        "root",
        "parseNoteGroup",
        "notes",
        "push",
        "length",
        "chords",
        "chord"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/khauri/Documents/NFT/src",
      "sourcesContent": [
        "import { CHORD_TYPES } from './constants'\nimport tokenize from './tokenizer'\n\nfunction retrieveChordType(type){\n  let typeValue\n  if(!(typeValue = CHORD_TYPES[type] || CHORD_TYPES[type.toUpperCase()])){\n    throw `Could not recognize chord type: ${type}`\n  }\n  return typeValue\n}\n\n/**\n * Match a literal string\n * @param {String} literal \n */\nconst parseLiteral = (literal) => (input) => {\n  const {tokens, position, original, consume, peek} = input\n  return {\n\n  }\n}\n/**\n * Matches a regex pattern\n * @param {RegExp} pattern \n */\nconst parsePattern = (pattern) => (input) => {\n  const [tokens, position] = input \n}\n\nconst parseEither = (parser1, parser2) => (input) => parser1(input) || parser2(input)\n\nexport function parse2(input){\n  const tokens = tokenize(input)\n  console.log(tokens)\n}\n/**\n * grammar:\n * DIGIT  = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9\n * NUMBER = DIGIT+\n * NOTE   = (A  | B | C | D | E | F | G) [ACC] [NUMBER] | R\n * ACC    = # | s | b \n * TYPE   = MAJ | M | MIN | m | ...\n * CHORD  = NOTE [TYPE] [/ NUMBER] | {NOTE [, NOTE]}\n * SONG   = CHORDS+\n * \n * Example: Cadd9/2 \n * @param {*} text \n */\nexport function parse(text){\n  // replace one or more spaces with one space\n  const tokens = text.replace(/\\s+/,\" \").split(\"\")\n  let pos = 0\n  const peek = () => tokens[pos] || ''\n  const consume = () => tokens[pos++]\n\n  function parseWhiteSpace () {\n    while(/\\s/.test(peek())){\n      consume()\n    }\n  }\n\n  const parseNumber = () => {\n    let digitStr = ''\n    while(/\\d/.test(peek())){\n      digitStr += consume()\n    }\n    return parseFloat(digitStr)\n  }\n\n  const parseAccidental = () => {\n    const result = {\n      isAccidental : false,\n      accidental : \"\"\n    }\n    if(/[#bs]/i.test(peek())){\n      result.isAccidental = true \n      result.accidental = consume()\n    }\n    return result\n  }\n\n  const parseOctave = () => {\n    const result = {\n      octave : 4\n    }\n    const octave = parseNumber()\n    if(!isNaN(octave)){\n      result.octave = octave\n    }\n    return result\n  }\n\n  const parseNote = () => {\n    if( !(/[a-gr]/i.test(peek())) ){\n      throw `unrecognized root note name: ${peek()}`\n    }\n    let name = consume().toUpperCase()\n    const accidental = parseAccidental()\n    if(accidental.isAccidental){\n      name += accidental.accidental\n    }\n    return { \n      name,\n      ...accidental,\n      ...parseOctave(),\n    }\n  }\n\n  function parseChord(){\n    const parseType = () => {\n      let typeStr = ''\n      while(/[\\w]/i.test(peek())){\n        typeStr += consume()\n      }\n      return {\n        type : typeStr ? retrieveChordType(typeStr) : CHORD_TYPES.MAJOR\n      }\n    }\n  \n    const parseDuration = () => {\n      const result = {\n        duration : 1\n      }\n      if(peek() === '/'){\n        consume()\n        result.duration = 1 / parseNumber()\n      }\n      return result\n    }\n  \n    return {\n      root : parseNote(),\n      ...parseType(),\n      ...parseDuration()\n    }\n  }\n\n  function parseNoteGroup(){\n    const notes = []\n    if(/{/.test(peek())){\n      while(!/}/.test(peek())){\n        // consume any non alpha-numerics (separators, whitespace, etc.)\n        while(/[\\W_]/.test(peek())) consume()\n        notes.push(parseNote())\n      }\n      parseWhiteSpace()\n      consume() // consume final }\n    }\n    return notes.length ? notes : null\n  }\n  // 1. TODO: lexical analysis to distinguish chords from lyrics\n  const chords = []\n  while(peek()){\n    parseWhiteSpace()\n    let chord = null\n    if(chord = parseNoteGroup()){\n      chords.push(chord)\n    }else if(chord = parseChord()){\n      chords.push(chord)\n    }\n  }\n  console.log(chords)\n}\n\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1565701824761
  },
  "{\"sourceRoot\":\"/Users/khauri/Documents/NFT/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/khauri/Documents/NFT\",\"filename\":\"/Users/khauri/Documents/NFT/src/constants.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/khauri/Documents/NFT\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.5.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/khauri/Documents/NFT/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/khauri/Documents/NFT",
      "filename": "/Users/khauri/Documents/NFT/src/constants.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/khauri/Documents/NFT",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/khauri/Documents/NFT/src/constants.js",
        "plugins": [
          "dynamicImport",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/khauri/Documents/NFT/src/constants.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/khauri/Documents/NFT/src",
        "sourceFileName": "constants.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CHORD_TYPES = exports.CLEFS = void 0;\nvar CLEFS = {\n  TREBLE: \"TREB\",\n  BASS: \"BASS\"\n};\nexports.CLEFS = CLEFS;\nvar CHORD_TYPES = expand({\n  \"Major|Maj|M\": \"MAJ\",\n  \"Minor|Min|m\": \"MIN\" // DIMINISHED : \"DIM\",\n  // MAJOR_SEVENTH : \"MAJ7\",\n  // MINOR_SEVENTH : \"MIN7\",\n  // DOMINANT_SEVENTH : \"DOM7\",\n  // SUSPENDED : \"SUS\",\n  // AUGMENTED : \"AUG\",\n  // EXTENDED : \"EXT\"\n\n});\nexports.CHORD_TYPES = CHORD_TYPES;\n\nfunction expand(dict) {\n  return Object.keys(dict).reduce(function (acc, curr) {\n    curr.split(\"|\").forEach(function (key) {\n      if (key.length > 1) {\n        acc[key.toUpperCase()] = dict[curr];\n      } else {\n        acc[key] = dict[curr];\n      }\n    });\n    return acc;\n  }, {});\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnN0YW50cy5qcyJdLCJuYW1lcyI6WyJDTEVGUyIsIlRSRUJMRSIsIkJBU1MiLCJDSE9SRF9UWVBFUyIsImV4cGFuZCIsImRpY3QiLCJPYmplY3QiLCJrZXlzIiwicmVkdWNlIiwiYWNjIiwiY3VyciIsInNwbGl0IiwiZm9yRWFjaCIsImtleSIsImxlbmd0aCIsInRvVXBwZXJDYXNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBTyxJQUFNQSxLQUFLLEdBQUc7QUFDbkJDLEVBQUFBLE1BQU0sRUFBRyxNQURVO0FBRW5CQyxFQUFBQSxJQUFJLEVBQUs7QUFGVSxDQUFkOztBQUtBLElBQU1DLFdBQVcsR0FBR0MsTUFBTSxDQUFDO0FBQ2hDLGlCQUFnQixLQURnQjtBQUVoQyxpQkFBZ0IsS0FGZ0IsQ0FHaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBVGdDLENBQUQsQ0FBMUI7OztBQVlQLFNBQVNBLE1BQVQsQ0FBZ0JDLElBQWhCLEVBQXFCO0FBQ25CLFNBQU9DLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZRixJQUFaLEVBQWtCRyxNQUFsQixDQUF5QixVQUFDQyxHQUFELEVBQU1DLElBQU4sRUFBYTtBQUMzQ0EsSUFBQUEsSUFBSSxDQUFDQyxLQUFMLENBQVcsR0FBWCxFQUFnQkMsT0FBaEIsQ0FDRSxVQUFBQyxHQUFHLEVBQUU7QUFDSCxVQUFHQSxHQUFHLENBQUNDLE1BQUosR0FBYSxDQUFoQixFQUFrQjtBQUNoQkwsUUFBQUEsR0FBRyxDQUFDSSxHQUFHLENBQUNFLFdBQUosRUFBRCxDQUFILEdBQXlCVixJQUFJLENBQUNLLElBQUQsQ0FBN0I7QUFDRCxPQUZELE1BRUs7QUFDSEQsUUFBQUEsR0FBRyxDQUFDSSxHQUFELENBQUgsR0FBU1IsSUFBSSxDQUFDSyxJQUFELENBQWI7QUFDRDtBQUNGLEtBUEg7QUFRQSxXQUFPRCxHQUFQO0FBQ0QsR0FWTSxFQVVMLEVBVkssQ0FBUDtBQVdEIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9raGF1cmkvRG9jdW1lbnRzL05GVC9zcmMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgQ0xFRlMgPSB7XG4gIFRSRUJMRSA6IFwiVFJFQlwiLFxuICBCQVNTICAgOiBcIkJBU1NcIlxufVxuXG5leHBvcnQgY29uc3QgQ0hPUkRfVFlQRVMgPSBleHBhbmQoe1xuICBcIk1ham9yfE1hanxNXCIgOiBcIk1BSlwiLFxuICBcIk1pbm9yfE1pbnxtXCIgOiBcIk1JTlwiLFxuICAvLyBESU1JTklTSEVEIDogXCJESU1cIixcbiAgLy8gTUFKT1JfU0VWRU5USCA6IFwiTUFKN1wiLFxuICAvLyBNSU5PUl9TRVZFTlRIIDogXCJNSU43XCIsXG4gIC8vIERPTUlOQU5UX1NFVkVOVEggOiBcIkRPTTdcIixcbiAgLy8gU1VTUEVOREVEIDogXCJTVVNcIixcbiAgLy8gQVVHTUVOVEVEIDogXCJBVUdcIixcbiAgLy8gRVhURU5ERUQgOiBcIkVYVFwiXG59KVxuXG5mdW5jdGlvbiBleHBhbmQoZGljdCl7XG4gIHJldHVybiBPYmplY3Qua2V5cyhkaWN0KS5yZWR1Y2UoKGFjYywgY3Vycik9PntcbiAgICBjdXJyLnNwbGl0KFwifFwiKS5mb3JFYWNoKFxuICAgICAga2V5PT57XG4gICAgICAgIGlmKGtleS5sZW5ndGggPiAxKXtcbiAgICAgICAgICBhY2Nba2V5LnRvVXBwZXJDYXNlKCldID0gZGljdFtjdXJyXVxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICBhY2Nba2V5XT1kaWN0W2N1cnJdXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgcmV0dXJuIGFjY1xuICB9LHt9KVxufSJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "constants.js"
      ],
      "names": [
        "CLEFS",
        "TREBLE",
        "BASS",
        "CHORD_TYPES",
        "expand",
        "dict",
        "Object",
        "keys",
        "reduce",
        "acc",
        "curr",
        "split",
        "forEach",
        "key",
        "length",
        "toUpperCase"
      ],
      "mappings": ";;;;;;AAAO,IAAMA,KAAK,GAAG;AACnBC,EAAAA,MAAM,EAAG,MADU;AAEnBC,EAAAA,IAAI,EAAK;AAFU,CAAd;;AAKA,IAAMC,WAAW,GAAGC,MAAM,CAAC;AAChC,iBAAgB,KADgB;AAEhC,iBAAgB,KAFgB,CAGhC;AACA;AACA;AACA;AACA;AACA;AACA;;AATgC,CAAD,CAA1B;;;AAYP,SAASA,MAAT,CAAgBC,IAAhB,EAAqB;AACnB,SAAOC,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkBG,MAAlB,CAAyB,UAACC,GAAD,EAAMC,IAAN,EAAa;AAC3CA,IAAAA,IAAI,CAACC,KAAL,CAAW,GAAX,EAAgBC,OAAhB,CACE,UAAAC,GAAG,EAAE;AACH,UAAGA,GAAG,CAACC,MAAJ,GAAa,CAAhB,EAAkB;AAChBL,QAAAA,GAAG,CAACI,GAAG,CAACE,WAAJ,EAAD,CAAH,GAAyBV,IAAI,CAACK,IAAD,CAA7B;AACD,OAFD,MAEK;AACHD,QAAAA,GAAG,CAACI,GAAD,CAAH,GAASR,IAAI,CAACK,IAAD,CAAb;AACD;AACF,KAPH;AAQA,WAAOD,GAAP;AACD,GAVM,EAUL,EAVK,CAAP;AAWD",
      "sourceRoot": "/Users/khauri/Documents/NFT/src",
      "sourcesContent": [
        "export const CLEFS = {\n  TREBLE : \"TREB\",\n  BASS   : \"BASS\"\n}\n\nexport const CHORD_TYPES = expand({\n  \"Major|Maj|M\" : \"MAJ\",\n  \"Minor|Min|m\" : \"MIN\",\n  // DIMINISHED : \"DIM\",\n  // MAJOR_SEVENTH : \"MAJ7\",\n  // MINOR_SEVENTH : \"MIN7\",\n  // DOMINANT_SEVENTH : \"DOM7\",\n  // SUSPENDED : \"SUS\",\n  // AUGMENTED : \"AUG\",\n  // EXTENDED : \"EXT\"\n})\n\nfunction expand(dict){\n  return Object.keys(dict).reduce((acc, curr)=>{\n    curr.split(\"|\").forEach(\n      key=>{\n        if(key.length > 1){\n          acc[key.toUpperCase()] = dict[curr]\n        }else{\n          acc[key]=dict[curr]\n        }\n      })\n    return acc\n  },{})\n}"
      ]
    },
    "sourceType": "script",
    "mtime": 1565534986295
  },
  "{\"sourceRoot\":\"/Users/khauri/Documents/NFT/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/khauri/Documents/NFT\",\"filename\":\"/Users/khauri/Documents/NFT/src/tokenizer.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/khauri/Documents/NFT\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.5.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/khauri/Documents/NFT/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/khauri/Documents/NFT",
      "filename": "/Users/khauri/Documents/NFT/src/tokenizer.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/khauri/Documents/NFT",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/khauri/Documents/NFT/src/tokenizer.js",
        "plugins": [
          "dynamicImport",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/khauri/Documents/NFT/src/tokenizer.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/khauri/Documents/NFT/src",
        "sourceFileName": "tokenizer.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _this = void 0;\n\nvar _default = function _default(input) {\n  var pos = 0;\n\n  var inc = function inc(amount) {\n    return pos += amount;\n  }; // returns new position\n\n  /**\n   * Tokenize a single character\n   * @param {*} char \n   * @param {*} type \n   */\n\n\n  var tokenizeChar = function tokenizeChar(_char, type) {\n    return function () {\n      return input[pos] === _char ? [1, {\n        type: type,\n        value: _char\n      }] : null;\n    };\n  };\n  /**\n   * Tokenize multiple characters\n   * @param {*} str \n   * @param {*} type \n   */\n\n\n  var tokenizeString = function tokenizeString(str, type) {\n    return function () {\n      return input.startsWith(str, pos) ? [str.length, {\n        type: type,\n        value: str\n      }] : null;\n    };\n  };\n  /**\n   * Tokenizes a Regular Expression pattern\n   * Limitation: only parses one letter at a time\n   * @param {RegExp} pattern \n   * @param {*} type \n   */\n\n\n  var tokenizePattern = function tokenizePattern(pattern, type) {\n    return function () {\n      var consumed = 0,\n          _char2 = null,\n          value = '';\n\n      while ((_char2 = input[pos + consumed]) && pattern.test(_char2)) {\n        value += _char2;\n        consumed++;\n      }\n\n      return consumed ? [consumed, {\n        type: type,\n        value: value\n      }] : null;\n    };\n  };\n  /**\n   * Skip any pattern\n   * Limitation: same as tokenizePattern\n   * @param {*} pattern \n   */\n\n\n  var skipPattern = function skipPattern(pattern) {\n    var tokenizer = tokenizePattern(pattern, null);\n    return function () {\n      var result = tokenizer();\n      return result ? [result[0], null] : null;\n    };\n  };\n\n  var skipWhiteSpace = skipPattern(/\\s/);\n  var tokenizeOpenBracket = tokenizeChar('{', 'bracket');\n  var tokenizeCloseBracket = tokenizeChar('}', 'bracket');\n  var tokenizeNumber = tokenizePattern(/\\d/, 'number');\n  var tokenizeSeparator = tokenizePattern(/[,|;]/, \"separator\");\n  var tokenizeDelimiter = tokenizePattern(/[*+\\/]/, 'operator');\n  var tokenizeValue = tokenizePattern(/[a-z#]/i, 'value');\n  var tokenizers = [// TODO: skipComments\n  skipWhiteSpace, tokenizeOpenBracket, tokenizeCloseBracket, tokenizeSeparator, tokenizeDelimiter, tokenizeNumber, tokenizeValue];\n  var tokens = [];\n\n  while (pos < input.length) {\n    var wasTokenized = tokenizers.some(function (tokenizer) {\n      var result = tokenizer();\n\n      if (!result) {\n        return false;\n      }\n\n      inc(result[0]);\n      result[1] && tokens.push(result[1]);\n      return true;\n    });\n\n    if (!wasTokenized) {\n      throw Error(\"Unrecognized Token \\\"\".concat(input[pos], \"\\\" at pos \").concat(pos));\n    }\n  } // TODO: remove all lines starting with #\n\n\n  return {\n    raw: input,\n    tokens: tokens,\n    pos: 0,\n    peek: function peek() {\n      return _this.tokens[_this.pos];\n    },\n    consume: function consume() {\n      return _this.tokens[_this.pos++];\n    }\n  };\n};\n\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRva2VuaXplci5qcyJdLCJuYW1lcyI6WyJpbnB1dCIsInBvcyIsImluYyIsImFtb3VudCIsInRva2VuaXplQ2hhciIsImNoYXIiLCJ0eXBlIiwidmFsdWUiLCJ0b2tlbml6ZVN0cmluZyIsInN0ciIsInN0YXJ0c1dpdGgiLCJsZW5ndGgiLCJ0b2tlbml6ZVBhdHRlcm4iLCJwYXR0ZXJuIiwiY29uc3VtZWQiLCJ0ZXN0Iiwic2tpcFBhdHRlcm4iLCJ0b2tlbml6ZXIiLCJyZXN1bHQiLCJza2lwV2hpdGVTcGFjZSIsInRva2VuaXplT3BlbkJyYWNrZXQiLCJ0b2tlbml6ZUNsb3NlQnJhY2tldCIsInRva2VuaXplTnVtYmVyIiwidG9rZW5pemVTZXBhcmF0b3IiLCJ0b2tlbml6ZURlbGltaXRlciIsInRva2VuaXplVmFsdWUiLCJ0b2tlbml6ZXJzIiwidG9rZW5zIiwid2FzVG9rZW5pemVkIiwic29tZSIsInB1c2giLCJFcnJvciIsInJhdyIsInBlZWsiLCJjb25zdW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7ZUFBZSxrQkFBQUEsS0FBSyxFQUFJO0FBQ3RCLE1BQUlDLEdBQUcsR0FBRyxDQUFWOztBQUNBLE1BQU1DLEdBQUcsR0FBRyxTQUFOQSxHQUFNLENBQUNDLE1BQUQ7QUFBQSxXQUFZRixHQUFHLElBQUlFLE1BQW5CO0FBQUEsR0FBWixDQUZzQixDQUVnQjs7QUFFdEM7Ozs7Ozs7QUFLQSxNQUFNQyxZQUFZLEdBQUcsU0FBZkEsWUFBZSxDQUFDQyxLQUFELEVBQU9DLElBQVA7QUFBQSxXQUFnQixZQUFNO0FBQ3pDLGFBQU9OLEtBQUssQ0FBQ0MsR0FBRCxDQUFMLEtBQWVJLEtBQWYsR0FBc0IsQ0FBQyxDQUFELEVBQUk7QUFBQ0MsUUFBQUEsSUFBSSxFQUFKQSxJQUFEO0FBQU9DLFFBQUFBLEtBQUssRUFBR0Y7QUFBZixPQUFKLENBQXRCLEdBQWtELElBQXpEO0FBQ0QsS0FGb0I7QUFBQSxHQUFyQjtBQUlBOzs7Ozs7O0FBS0EsTUFBTUcsY0FBYyxH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Q0FBRCxDQUFsQixDQUFiO0FBQ0EsYUFBTyxJQUFQO0FBQ0QsS0FSb0IsQ0FBckI7O0FBU0EsUUFBRyxDQUFDVSxZQUFKLEVBQWlCO0FBQ2YsWUFBTUcsS0FBSyxnQ0FBd0IvQixLQUFLLENBQUNDLEdBQUQsQ0FBN0IsdUJBQThDQSxHQUE5QyxFQUFYO0FBQ0Q7QUFDRixHQXRGcUIsQ0F3RnRCOzs7QUFDQSxTQUFPO0FBQ0wrQixJQUFBQSxHQUFHLEVBQUdoQyxLQUREO0FBRUwyQixJQUFBQSxNQUFNLEVBQU5BLE1BRks7QUFHTDFCLElBQUFBLEdBQUcsRUFBRyxDQUhEO0FBSUxnQyxJQUFBQSxJQUFJLEVBQUc7QUFBQSxhQUFNLEtBQUksQ0FBQ04sTUFBTCxDQUFZLEtBQUksQ0FBQzFCLEdBQWpCLENBQU47QUFBQSxLQUpGO0FBS0xpQyxJQUFBQSxPQUFPLEVBQUc7QUFBQSxhQUFNLEtBQUksQ0FBQ1AsTUFBTCxDQUFZLEtBQUksQ0FBQzFCLEdBQUwsRUFBWixDQUFOO0FBQUE7QUFMTCxHQUFQO0FBT0QsQyIsInNvdXJjZVJvb3QiOiIvVXNlcnMva2hhdXJpL0RvY3VtZW50cy9ORlQvc3JjIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgaW5wdXQgPT4ge1xuICBsZXQgcG9zID0gMFxuICBjb25zdCBpbmMgPSAoYW1vdW50KSA9PiBwb3MgKz0gYW1vdW50IC8vIHJldHVybnMgbmV3IHBvc2l0aW9uXG5cbiAgLyoqXG4gICAqIFRva2VuaXplIGEgc2luZ2xlIGNoYXJhY3RlclxuICAgKiBAcGFyYW0geyp9IGNoYXIgXG4gICAqIEBwYXJhbSB7Kn0gdHlwZSBcbiAgICovXG4gIGNvbnN0IHRva2VuaXplQ2hhciA9IChjaGFyLCB0eXBlKSA9PiAoKSA9PiB7XG4gICAgcmV0dXJuIGlucHV0W3Bvc10gPT09IGNoYXIgPyBbMSwge3R5cGUsIHZhbHVlIDogY2hhcn1dIDogbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIFRva2VuaXplIG11bHRpcGxlIGNoYXJhY3RlcnNcbiAgICogQHBhcmFtIHsqfSBzdHIgXG4gICAqIEBwYXJhbSB7Kn0gdHlwZSBcbiAgICovXG4gIGNvbnN0IHRva2VuaXplU3RyaW5nID0gKHN0ciwgdHlwZSkgPT4gKCkgPT4ge1xuICAgIHJldHVybiBpbnB1dC5zdGFydHNXaXRoKHN0ciwgcG9zKSA/IFtzdHIubGVuZ3RoLCB7dHlwZSwgdmFsdWUgOiBzdHJ9IF0gOiBudWxsXG4gIH1cblxuICAvKipcbiAgICogVG9rZW5pemVzIGEgUmVndWxhciBFeHByZXNzaW9uIHBhdHRlcm5cbiAgICogTGltaXRhdGlvbjogb25seSBwYXJzZXMgb25lIGxldHRlciBhdCBhIHRpbWVcbiAgICogQHBhcmFtIHtSZWdFeHB9IHBhdHRlcm4gXG4gICAqIEBwYXJhbSB7Kn0gdHlwZSBcbiAgICovXG4gIGNvbnN0IHRva2VuaXplUGF0dGVybiA9IChwYXR0ZXJuLCB0eXBlKSA9PiAoKSA9PiB7XG4gICAgbGV0IGNvbnN1bWVkID0gMCxcbiAgICAgICAgY2hhciA9IG51bGwsXG4gICAgICAgIHZhbHVlID0gJydcbiAgICB3aGlsZSgoY2hhciA9IGlucHV0W3BvcyArIGNvbnN1bWVkXSkgJiYgcGF0dGVybi50ZXN0KGNoYXIpKXtcbiAgICAgIHZhbHVlICs9IGNoYXJcbiAgICAgIGNvbnN1bWVkKytcbiAgICB9XG4gICAgcmV0dXJuIGNvbnN1bWVkID8gW2NvbnN1bWVkLCB7dHlwZSwgdmFsdWV9XSA6IG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBTa2lwIGFueSBwYXR0ZXJuXG4gICAqIExpbWl0YXRpb246IHNhbWUgYXMgdG9rZW5pemVQYXR0ZXJuXG4gICAqIEBwYXJhbSB7Kn0gcGF0dGVybiBcbiAgICovXG4gIGNvbnN0IHNraXBQYXR0ZXJuID0gKHBhdHRlcm4pID0+IHtcbiAgICBjb25zdCB0b2tlbml6ZXIgPSB0b2tlbml6ZVBhdHRlcm4ocGF0dGVybiwgbnVsbClcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gdG9rZW5pemVyKClcbiAgICAgIHJldHVybiByZXN1bHQgPyBbcmVzdWx0WzBdLCBudWxsXSA6IG51bGxcbiAgICB9XG4gIH1cblxuICBjb25zdCBza2lwV2hpdGVTcGFjZSA9IHNraXBQYXR0ZXJuKC9cXHMvKVxuICBjb25zdCB0b2tlbml6ZU9wZW5CcmFja2V0ID0gdG9rZW5pemVDaGFyKCd7JywgJ2JyYWNrZXQnKVxuICBjb25zdCB0b2tlbml6ZUNsb3NlQnJhY2tldCA9IHRva2VuaXplQ2hhcignfScsICdicmFja2V0JylcbiAgY29uc3QgdG9rZW5pemVOdW1iZXIgPSB0b2tlbml6ZVBhdHRlcm4oL1xcZC8sICdudW1iZXInKVxuICBjb25zdCB0b2tlbml6ZVNlcGFyYXRvciA9IHRva2VuaXplUGF0dGVybigvWyx8O10vLCBcInNlcGFyYXRvclwiKVxuICBjb25zdCB0b2tlbml6ZURlbGltaXRlciA9IHRva2VuaXplUGF0dGVybigvWyorXFwvXS8sICdvcGVyYXRvcicpXG4gIGNvbnN0IHRva2VuaXplVmFsdWUgPSB0b2tlbml6ZVBhdHRlcm4oL1thLXojXS9pLCAndmFsdWUnKVxuXG4gIGNvbnN0IHRva2VuaXplcnMgPSBbXG4gICAgLy8gVE9ETzogc2tpcENvbW1lbnRzXG4gICAgc2tpcFdoaXRlU3BhY2UsXG4gICAgdG9rZW5pemVPcGVuQnJhY2tldCxcbiAgICB0b2tlbml6ZUNsb3NlQnJhY2tldCxcbiAgICB0b2tlbml6ZVNlcGFyYXRvcixcbiAgICB0b2tlbml6ZURlbGltaXRlcixcbiAgICB0b2tlbml6ZU51bWJlcixcbiAgICB0b2tlbml6ZVZhbHVlXG4gIF1cblxuICBjb25zdCB0b2tlbnMgPSBbXVxuXG4gIHdoaWxlKHBvcyA8IGlucHV0Lmxlbmd0aCl7XG4gICAgY29uc3Qgd2FzVG9rZW5pemVkID0gdG9rZW5pemVycy5zb21lKCh0b2tlbml6ZXIpPT57XG4gICAgICBjb25zdCByZXN1bHQgPSB0b2tlbml6ZXIoKVxuICAgICAgaWYoIXJlc3VsdCl7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgaW5jKHJlc3VsdFswXSlcbiAgICAgIHJlc3VsdFsxXSAmJiB0b2tlbnMucHVzaChyZXN1bHRbMV0pXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0pXG4gICAgaWYoIXdhc1Rva2VuaXplZCl7XG4gICAgICB0aHJvdyBFcnJvcihgVW5yZWNvZ25pemVkIFRva2VuIFwiJHtpbnB1dFtwb3NdfVwiIGF0IHBvcyAke3Bvc31gKVxuICAgIH1cbiAgfVxuXG4gIC8vIFRPRE86IHJlbW92ZSBhbGwgbGluZXMgc3RhcnRpbmcgd2l0aCAjXG4gIHJldHVybiB7XG4gICAgcmF3IDogaW5wdXQsXG4gICAgdG9rZW5zLFxuICAgIHBvcyA6IDAsXG4gICAgcGVlayA6ICgpID0+IHRoaXMudG9rZW5zW3RoaXMucG9zXSxcbiAgICBjb25zdW1lIDogKCkgPT4gdGhpcy50b2tlbnNbdGhpcy5wb3MrK11cbiAgfVxufSJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "tokenizer.js"
      ],
      "names": [
        "input",
        "pos",
        "inc",
        "amount",
        "tokenizeChar",
        "char",
        "type",
        "value",
        "tokenizeString",
        "str",
        "startsWith",
        "length",
        "tokenizePattern",
        "pattern",
        "consumed",
        "test",
        "skipPattern",
        "tokenizer",
        "result",
        "skipWhiteSpace",
        "tokenizeOpenBracket",
        "tokenizeCloseBracket",
        "tokenizeNumber",
        "tokenizeSeparator",
        "tokenizeDelimiter",
        "tokenizeValue",
        "tokenizers",
        "tokens",
        "wasTokenized",
        "some",
        "push",
        "Error",
        "raw",
        "peek",
        "consume"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/khauri/Documents/NFT/src",
      "sourcesContent": [
        "export default input => {\n  let pos = 0\n  const inc = (amount) => pos += amount // returns new position\n\n  /**\n   * Tokenize a single character\n   * @param {*} char \n   * @param {*} type \n   */\n  const tokenizeChar = (char, type) => () => {\n    return input[pos] === char ? [1, {type, value : char}] : null\n  }\n\n  /**\n   * Tokenize multiple characters\n   * @param {*} str \n   * @param {*} type \n   */\n  const tokenizeString = (str, type) => () => {\n    return input.startsWith(str, pos) ? [str.length, {type, value : str} ] : null\n  }\n\n  /**\n   * Tokenizes a Regular Expression pattern\n   * Limitation: only parses one letter at a time\n   * @param {RegExp} pattern \n   * @param {*} type \n   */\n  const tokenizePattern = (pattern, type) => () => {\n    let consumed = 0,\n        char = null,\n        value = ''\n    while((char = input[pos + consumed]) && pattern.test(char)){\n      value += char\n      consumed++\n    }\n    return consumed ? [consumed, {type, value}] : null\n  }\n\n  /**\n   * Skip any pattern\n   * Limitation: same as tokenizePattern\n   * @param {*} pattern \n   */\n  const skipPattern = (pattern) => {\n    const tokenizer = tokenizePattern(pattern, null)\n    return () => {\n      const result = tokenizer()\n      return result ? [result[0], null] : null\n    }\n  }\n\n  const skipWhiteSpace = skipPattern(/\\s/)\n  const tokenizeOpenBracket = tokenizeChar('{', 'bracket')\n  const tokenizeCloseBracket = tokenizeChar('}', 'bracket')\n  const tokenizeNumber = tokenizePattern(/\\d/, 'number')\n  const tokenizeSeparator = tokenizePattern(/[,|;]/, \"separator\")\n  const tokenizeDelimiter = tokenizePattern(/[*+\\/]/, 'operator')\n  const tokenizeValue = tokenizePattern(/[a-z#]/i, 'value')\n\n  const tokenizers = [\n    // TODO: skipComments\n    skipWhiteSpace,\n    tokenizeOpenBracket,\n    tokenizeCloseBracket,\n    tokenizeSeparator,\n    tokenizeDelimiter,\n    tokenizeNumber,\n    tokenizeValue\n  ]\n\n  const tokens = []\n\n  while(pos < input.length){\n    const wasTokenized = tokenizers.some((tokenizer)=>{\n      const result = tokenizer()\n      if(!result){\n        return false\n      }\n      inc(result[0])\n      result[1] && tokens.push(result[1])\n      return true\n    })\n    if(!wasTokenized){\n      throw Error(`Unrecognized Token \"${input[pos]}\" at pos ${pos}`)\n    }\n  }\n\n  // TODO: remove all lines starting with #\n  return {\n    raw : input,\n    tokens,\n    pos : 0,\n    peek : () => this.tokens[this.pos],\n    consume : () => this.tokens[this.pos++]\n  }\n}"
      ]
    },
    "sourceType": "script",
    "mtime": 1565703492706
  }
}