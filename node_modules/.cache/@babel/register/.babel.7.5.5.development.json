{
  "{\"sourceRoot\":\"/Users/khauri/Documents/NFT\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/khauri/Documents/NFT\",\"filename\":\"/Users/khauri/Documents/NFT/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/khauri/Documents/NFT\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.5.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/khauri/Documents/NFT",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/khauri/Documents/NFT",
      "filename": "/Users/khauri/Documents/NFT/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/khauri/Documents/NFT",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/khauri/Documents/NFT/index.js",
        "plugins": [
          "dynamicImport",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/khauri/Documents/NFT/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/khauri/Documents/NFT",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _src = _interopRequireDefault(require(\"./src\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar program = \"\\ntitle : Adele - Hello\\nautor : OKAY LOL WOW\\n\\nEm          C         G    D\\nHello, How are you\\n\";\nconsole.log(JSON.stringify(_src[\"default\"].parseText(program), null, 2)); // NFT.parseText('C5 C6') // Invalid: Parsers another expression when there isn't an operand \n// NFT.parseText(\n// `\n// Em G         D C\n// Hello,  it's me\n//        Em          G                D\n// I was wondering if after all these years\n// `)\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInByb2dyYW0iLCJjb25zb2xlIiwibG9nIiwiSlNPTiIsInN0cmluZ2lmeSIsIk5GVCIsInBhcnNlVGV4dCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztBQUdBLElBQU1BLE9BQU8sd0dBQWI7QUFRQUMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLElBQUksQ0FBQ0MsU0FBTCxDQUFlQyxnQkFBSUMsU0FBSixDQUFjTixPQUFkLENBQWYsRUFBdUMsSUFBdkMsRUFBNkMsQ0FBN0MsQ0FBWixFLENBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIvVXNlcnMva2hhdXJpL0RvY3VtZW50cy9ORlQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTkZUIGZyb20gJy4vc3JjJ1xuXG5cbmNvbnN0IHByb2dyYW0gPSBgXG50aXRsZSA6IEFkZWxlIC0gSGVsbG9cbmF1dG9yIDogT0tBWSBMT0wgV09XXG5cbkVtICAgICAgICAgIEMgICAgICAgICBHICAgIERcbkhlbGxvLCBIb3cgYXJlIHlvdVxuYFxuXG5jb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShORlQucGFyc2VUZXh0KHByb2dyYW0pLCBudWxsLCAyKSlcbi8vIE5GVC5wYXJzZVRleHQoJ0M1IEM2JykgLy8gSW52YWxpZDogUGFyc2VycyBhbm90aGVyIGV4cHJlc3Npb24gd2hlbiB0aGVyZSBpc24ndCBhbiBvcGVyYW5kIFxuXG4vLyBORlQucGFyc2VUZXh0KFxuLy8gYFxuLy8gRW0gRyAgICAgICAgIEQgQ1xuLy8gSGVsbG8sICBpdCdzIG1lXG4vLyAgICAgICAgRW0gICAgICAgICAgRyAgICAgICAgICAgICAgICBEXG4vLyBJIHdhcyB3b25kZXJpbmcgaWYgYWZ0ZXIgYWxsIHRoZXNlIHllYXJzXG4vLyBgKSJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "program",
        "console",
        "log",
        "JSON",
        "stringify",
        "NFT",
        "parseText"
      ],
      "mappings": ";;AAAA;;;;AAGA,IAAMA,OAAO,wGAAb;AAQAC,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeC,gBAAIC,SAAJ,CAAcN,OAAd,CAAf,EAAuC,IAAvC,EAA6C,CAA7C,CAAZ,E,CACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA",
      "sourceRoot": "/Users/khauri/Documents/NFT",
      "sourcesContent": [
        "import NFT from './src'\n\n\nconst program = `\ntitle : Adele - Hello\nautor : OKAY LOL WOW\n\nEm          C         G    D\nHello, How are you\n`\n\nconsole.log(JSON.stringify(NFT.parseText(program), null, 2))\n// NFT.parseText('C5 C6') // Invalid: Parsers another expression when there isn't an operand \n\n// NFT.parseText(\n// `\n// Em G         D C\n// Hello,  it's me\n//        Em          G                D\n// I was wondering if after all these years\n// `)"
      ]
    },
    "sourceType": "script",
    "mtime": 1566479901036
  },
  "{\"sourceRoot\":\"/Users/khauri/Documents/NFT/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/khauri/Documents/NFT\",\"filename\":\"/Users/khauri/Documents/NFT/src/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/khauri/Documents/NFT\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.5.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/khauri/Documents/NFT/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/khauri/Documents/NFT",
      "filename": "/Users/khauri/Documents/NFT/src/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/khauri/Documents/NFT",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/khauri/Documents/NFT/src/index.js",
        "plugins": [
          "dynamicImport",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/khauri/Documents/NFT/src/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/khauri/Documents/NFT/src",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _NFT_Parser = _interopRequireDefault(require(\"./NFT_Parser\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Note =\n/*#__PURE__*/\nfunction () {\n  function Note() {\n    _classCallCheck(this, Note);\n  }\n\n  _createClass(Note, [{\n    key: \"transpose\",\n    value: function transpose() {}\n  }]);\n\n  return Note;\n}();\n/**\n * A Chord consists of one or more notes played simultaneously\n */\n\n\nvar Chord =\n/*#__PURE__*/\nfunction () {\n  function Chord() {\n    _classCallCheck(this, Chord);\n\n    this.measure = null;\n    this.staff = null;\n    this.notes = [];\n    this.duration = 1;\n  }\n\n  _createClass(Chord, null, [{\n    key: \"fromNotes\",\n    value: function fromNotes(notes) {}\n  }]);\n\n  return Chord;\n}();\n\nvar Measure =\n/*#__PURE__*/\nfunction () {\n  function Measure(_ref) {\n    var _ref$comp = _ref.comp,\n        comp = _ref$comp === void 0 ? null : _ref$comp,\n        _ref$next = _ref.next,\n        next = _ref$next === void 0 ? null : _ref$next,\n        _ref$prev = _ref.prev,\n        prev = _ref$prev === void 0 ? null : _ref$prev;\n\n    _classCallCheck(this, Measure);\n\n    this.comp = comp;\n    this.next = next;\n    this.prev = prev;\n    this.beatsLeft = this.comp.bpm;\n  }\n  /**\n   * \n   * @param {Chord} chord \n   */\n\n\n  _createClass(Measure, [{\n    key: \"canAddChord\",\n    value: function canAddChord(chord, position) {\n      return chord.duration <= this.beatsLeft;\n    }\n    /**\n     * Adds a chord at a given position. If a chord is added at a \n     * position already occupied by a chord and the two chords have, \n     * the same duration, then the original chord will be replaced.\n     * If they do not have the same duration, then any subsequent chords\n     * in the measure may be removed if they cause the measure to overflow.\n     * @param {*} chord \n     * @param {*} position - defaults to the end of the measure\n     */\n\n  }, {\n    key: \"addChord\",\n    value: function addChord(chord, position) {// If you try to add a chord that exceeds the total beats, \n      // then it will throw an error if there is a next measure\n      // otherwise a new measure will be added\n    }\n  }]);\n\n  return Measure;\n}();\n\nvar Composition =\n/*#__PURE__*/\nfunction () {\n  function Composition() {\n    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref2$bpm = _ref2.bpm,\n        bpm = _ref2$bpm === void 0 ? 4 / 4 : _ref2$bpm;\n\n    _classCallCheck(this, Composition);\n  }\n\n  _createClass(Composition, [{\n    key: \"addMeasure\",\n    value: function addMeasure(data) {\n      var measure = new Measure(_objectSpread({\n        comp: this\n      }, data));\n      return measure;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {} // smaller filesize but more client-side work\n\n  }, {\n    key: \"toSimplifiedJSON\",\n    value: function toSimplifiedJSON() {}\n  }]);\n\n  return Composition;\n}();\n\nvar _default = new (\n/*#__PURE__*/\nfunction () {\n  function _class() {\n    _classCallCheck(this, _class);\n  }\n\n  _createClass(_class, [{\n    key: \"parseText\",\n\n    /** \n     * Parse String -> JSON -> Composition\n     * @param {String} text\n     */\n    value: function parseText(text) {\n      // const lines = text.split('\\n')\n      // let stream\n      // while(lines.length){\n      //   stream = parser.feed(lines.shift())\n      //   console.log(stream)\n      // }\n      // return stream\n      text = text.trim() + '\\n'; // ensure file ends with newline\n\n      var result = _NFT_Parser[\"default\"].feed(text).finish();\n\n      if (result.length > 1) {\n        console.log(result.length);\n      }\n\n      return this.parseJSON(result);\n    }\n    /**\n     * parse JSON string/obj -> Composition\n     */\n\n  }, {\n    key: \"parseJSON\",\n    value: function parseJSON(json) {\n      var composition = new Composition(); // TODO\n\n      return json;\n    }\n  }, {\n    key: \"parseSimplifiedJSON\",\n    value: function parseSimplifiedJSON() {}\n  }]);\n\n  return _class;\n}())();\n\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIk5vdGUiLCJDaG9yZCIsIm1lYXN1cmUiLCJzdGFmZiIsIm5vdGVzIiwiZHVyYXRpb24iLCJNZWFzdXJlIiwiY29tcCIsIm5leHQiLCJwcmV2IiwiYmVhdHNMZWZ0IiwiYnBtIiwiY2hvcmQiLCJwb3NpdGlvbiIsIkNvbXBvc2l0aW9uIiwiZGF0YSIsInRleHQiLCJ0cmltIiwicmVzdWx0IiwicGFyc2VyIiwiZmVlZCIsImZpbmlzaCIsImxlbmd0aCIsImNvbnNvbGUiLCJsb2ciLCJwYXJzZUpTT04iLCJqc29uIiwiY29tcG9zaXRpb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7OztJQUVNQSxJOzs7QUFDSixrQkFBYTtBQUFBO0FBQUU7Ozs7Z0NBQ0osQ0FBRTs7Ozs7QUFHZjs7Ozs7SUFHTUMsSzs7O0FBQ0osbUJBQWE7QUFBQTs7QUFDWCxTQUFLQyxPQUFMLEdBQWUsSUFBZjtBQUNBLFNBQUtDLEtBQUwsR0FBYSxJQUFiO0FBQ0EsU0FBS0MsS0FBTCxHQUFhLEVBQWI7QUFDQSxTQUFLQyxRQUFMLEdBQWdCLENBQWhCO0FBQ0Q7Ozs7OEJBQ2dCRCxLLEVBQU0sQ0FFdEI7Ozs7OztJQUdHRSxPOzs7QUFDSix5QkFJRTtBQUFBLHlCQUhBQyxJQUdBO0FBQUEsUUFIQUEsSUFHQSwwQkFITyxJQUdQO0FBQUEseUJBRkFDLElBRUE7QUFBQSxRQUZBQSxJQUVBLDBCQUZPLElBRVA7QUFBQSx5QkFEQUMsSUFDQTtBQUFBLFFBREFBLElBQ0EsMEJBRE8sSUFDUDs7QUFBQTs7QUFDQSxTQUFLRixJQUFMLEdBQVlBLElBQVo7QUFDQSxTQUFLQyxJQUFMLEdBQVlBLElBQVo7QUFDQSxTQUFLQyxJQUFMLEdBQVlBLElBQVo7QUFDQSxTQUFLQyxTQUFMLEdBQWlCLEtBQUtILElBQUwsQ0FBVUksR0FBM0I7QUFDRDtBQUNEOzs7Ozs7OztnQ0FJWUMsSyxFQUFPQyxRLEVBQVM7QUFDMUIsYUFBT0QsS0FBSyxDQUFDUCxRQUFOLElBQWtCLEtBQUtLLFNBQTlCO0FBQ0Q7QUFDRDs7Ozs7Ozs7Ozs7OzZCQVNTRSxLLEVBQU9DLFEsRUFBUyxDQUN2QjtBQUNBO0FBQ0E7QUFDRDs7Ozs7O0lBR0dDLFc7OztBQUNKLHlCQUVPO0FBQUEsb0ZBQUgsRUFBRztBQUFBLDBCQURMSCxHQUNLO0FBQUEsUUFETEEsR0FDSywwQkFEQyxJQUFFLENBQ0g7O0FBQUE7QUFFTjs7OzsrQkFFVUksSSxFQUFLO0FBQ2QsVUFBTWIsT0FBTyxHQUFHLElBQUlJLE9BQUo7QUFDZEMsUUFBQUEsSUFBSSxFQUFFO0FBRFEsU0FFWFEsSUFGVyxFQUFoQjtBQUlBLGFBQU9iLE9BQVA7QUFDRDs7OzZCQUVPLENBQUUsQyxDQUNWOzs7O3VDQUNrQixDQUFFOzs7Ozs7ZUFHUDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFDYjs7OztBQURhLDhCQUtIYyxJQUxHLEVBS0U7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQSxNQUFBQSxJQUFJLEdBQUdBLElBQUksQ0FBQ0MsSUFBTCxLQUFjLElBQXJCLENBUmEsQ0FRYTs7QUFDMUIsVUFBSUMsTUFBTSxHQUFHQyx1QkFBT0MsSUFBUCxDQUFZSixJQUFaLEVBQWtCSyxNQUFsQixFQUFiOztBQUNBLFVBQUdILE1BQU0sQ0FBQ0ksTUFBUCxHQUFnQixDQUFuQixFQUFxQjtBQUNuQkMsUUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlOLE1BQU0sQ0FBQ0ksTUFBbkI7QUFDRDs7QUFDRCxhQUFPLEtBQUtHLFNBQUwsQ0FBZVAsTUFBZixDQUFQO0FBQ0Q7QUFDRDs7OztBQXBCYTtBQUFBO0FBQUEsOEJBdUJIUSxJQXZCRyxFQXVCRTtBQUNiLFVBQU1DLFdBQVcsR0FBRyxJQUFJYixXQUFKLEVBQXBCLENBRGEsQ0FFYjs7QUFDQSxhQUFPWSxJQUFQO0FBQ0Q7QUEzQlk7QUFBQTtBQUFBLDBDQTZCUSxDQUFFO0FBN0JWOztBQUFBO0FBQUEsTSIsInNvdXJjZVJvb3QiOiIvVXNlcnMva2hhdXJpL0RvY3VtZW50cy9ORlQvc3JjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhcnNlciBmcm9tICcuL05GVF9QYXJzZXInXG5cbmNsYXNzIE5vdGUge1xuICBjb25zdHJ1Y3Rvcigpe31cbiAgdHJhbnNwb3NlKCl7fVxufVxuXG4vKipcbiAqIEEgQ2hvcmQgY29uc2lzdHMgb2Ygb25lIG9yIG1vcmUgbm90ZXMgcGxheWVkIHNpbXVsdGFuZW91c2x5XG4gKi9cbmNsYXNzIENob3JkIHtcbiAgY29uc3RydWN0b3IoKXtcbiAgICB0aGlzLm1lYXN1cmUgPSBudWxsIFxuICAgIHRoaXMuc3RhZmYgPSBudWxsXG4gICAgdGhpcy5ub3RlcyA9IFtdXG4gICAgdGhpcy5kdXJhdGlvbiA9IDFcbiAgfVxuICBzdGF0aWMgZnJvbU5vdGVzKG5vdGVzKXtcblxuICB9XG59XG5cbmNsYXNzIE1lYXN1cmUge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgY29tcCA9IG51bGwsXG4gICAgbmV4dCA9IG51bGwsIFxuICAgIHByZXYgPSBudWxsXG4gIH0pe1xuICAgIHRoaXMuY29tcCA9IGNvbXBcbiAgICB0aGlzLm5leHQgPSBuZXh0XG4gICAgdGhpcy5wcmV2ID0gcHJldlxuICAgIHRoaXMuYmVhdHNMZWZ0ID0gdGhpcy5jb21wLmJwbVxuICB9XG4gIC8qKlxuICAgKiBcbiAgICogQHBhcmFtIHtDaG9yZH0gY2hvcmQgXG4gICAqL1xuICBjYW5BZGRDaG9yZChjaG9yZCwgcG9zaXRpb24pe1xuICAgIHJldHVybiBjaG9yZC5kdXJhdGlvbiA8PSB0aGlzLmJlYXRzTGVmdFxuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgY2hvcmQgYXQgYSBnaXZlbiBwb3NpdGlvbi4gSWYgYSBjaG9yZCBpcyBhZGRlZCBhdCBhIFxuICAgKiBwb3NpdGlvbiBhbHJlYWR5IG9jY3VwaWVkIGJ5IGEgY2hvcmQgYW5kIHRoZSB0d28gY2hvcmRzIGhhdmUsIFxuICAgKiB0aGUgc2FtZSBkdXJhdGlvbiwgdGhlbiB0aGUgb3JpZ2luYWwgY2hvcmQgd2lsbCBiZSByZXBsYWNlZC5cbiAgICogSWYgdGhleSBkbyBub3QgaGF2ZSB0aGUgc2FtZSBkdXJhdGlvbiwgdGhlbiBhbnkgc3Vic2VxdWVudCBjaG9yZHNcbiAgICogaW4gdGhlIG1lYXN1cmUgbWF5IGJlIHJlbW92ZWQgaWYgdGhleSBjYXVzZSB0aGUgbWVhc3VyZSB0byBvdmVyZmxvdy5cbiAgICogQHBhcmFtIHsqfSBjaG9yZCBcbiAgICogQHBhcmFtIHsqfSBwb3NpdGlvbiAtIGRlZmF1bHRzIHRvIHRoZSBlbmQgb2YgdGhlIG1lYXN1cmVcbiAgICovXG4gIGFkZENob3JkKGNob3JkLCBwb3NpdGlvbil7XG4gICAgLy8gSWYgeW91IHRyeSB0byBhZGQgYSBjaG9yZCB0aGF0IGV4Y2VlZHMgdGhlIHRvdGFsIGJlYXRzLCBcbiAgICAvLyB0aGVuIGl0IHdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgdGhlcmUgaXMgYSBuZXh0IG1lYXN1cmVcbiAgICAvLyBvdGhlcndpc2UgYSBuZXcgbWVhc3VyZSB3aWxsIGJlIGFkZGVkXG4gIH1cbn1cblxuY2xhc3MgQ29tcG9zaXRpb24ge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgYnBtID0gNC80XG4gIH0gPSB7fSl7XG5cbiAgfVxuXG4gIGFkZE1lYXN1cmUoZGF0YSl7XG4gICAgY29uc3QgbWVhc3VyZSA9IG5ldyBNZWFzdXJlKHtcbiAgICAgIGNvbXA6IHRoaXMsIFxuICAgICAgLi4uZGF0YVxuICAgIH0pXG4gICAgcmV0dXJuIG1lYXN1cmVcbiAgfVxuXG4gIHRvSlNPTigpe31cbiAgLy8gc21hbGxlciBmaWxlc2l6ZSBidXQgbW9yZSBjbGllbnQtc2lkZSB3b3JrXG4gIHRvU2ltcGxpZmllZEpTT04oKXt9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBjbGFzcyB7XG4gIC8qKiBcbiAgICogUGFyc2UgU3RyaW5nIC0+IEpTT04gLT4gQ29tcG9zaXRpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHRleHRcbiAgICovXG4gIHBhcnNlVGV4dCh0ZXh0KXtcbiAgICAvLyBjb25zdCBsaW5lcyA9IHRleHQuc3BsaXQoJ1xcbicpXG4gICAgLy8gbGV0IHN0cmVhbVxuICAgIC8vIHdoaWxlKGxpbmVzLmxlbmd0aCl7XG4gICAgLy8gICBzdHJlYW0gPSBwYXJzZXIuZmVlZChsaW5lcy5zaGlmdCgpKVxuICAgIC8vICAgY29uc29sZS5sb2coc3RyZWFtKVxuICAgIC8vIH1cbiAgICAvLyByZXR1cm4gc3RyZWFtXG4gICAgdGV4dCA9IHRleHQudHJpbSgpICsgJ1xcbicgLy8gZW5zdXJlIGZpbGUgZW5kcyB3aXRoIG5ld2xpbmVcbiAgICBsZXQgcmVzdWx0ID0gcGFyc2VyLmZlZWQodGV4dCkuZmluaXNoKClcbiAgICBpZihyZXN1bHQubGVuZ3RoID4gMSl7XG4gICAgICBjb25zb2xlLmxvZyhyZXN1bHQubGVuZ3RoKVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wYXJzZUpTT04ocmVzdWx0KVxuICB9XG4gIC8qKlxuICAgKiBwYXJzZSBKU09OIHN0cmluZy9vYmogLT4gQ29tcG9zaXRpb25cbiAgICovXG4gIHBhcnNlSlNPTihqc29uKXtcbiAgICBjb25zdCBjb21wb3NpdGlvbiA9IG5ldyBDb21wb3NpdGlvbigpXG4gICAgLy8gVE9ET1xuICAgIHJldHVybiBqc29uXG4gIH1cbiAgXG4gIHBhcnNlU2ltcGxpZmllZEpTT04oKXt9XG59XG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "Note",
        "Chord",
        "measure",
        "staff",
        "notes",
        "duration",
        "Measure",
        "comp",
        "next",
        "prev",
        "beatsLeft",
        "bpm",
        "chord",
        "position",
        "Composition",
        "data",
        "text",
        "trim",
        "result",
        "parser",
        "feed",
        "finish",
        "length",
        "console",
        "log",
        "parseJSON",
        "json",
        "composition"
      ],
      "mappings": ";;;;;;;AAAA;;;;;;;;;;;;;;;;IAEMA,I;;;AACJ,kBAAa;AAAA;AAAE;;;;gCACJ,CAAE;;;;;AAGf;;;;;IAGMC,K;;;AACJ,mBAAa;AAAA;;AACX,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,QAAL,GAAgB,CAAhB;AACD;;;;8BACgBD,K,EAAM,CAEtB;;;;;;IAGGE,O;;;AACJ,yBAIE;AAAA,yBAHAC,IAGA;AAAA,QAHAA,IAGA,0BAHO,IAGP;AAAA,yBAFAC,IAEA;AAAA,QAFAA,IAEA,0BAFO,IAEP;AAAA,yBADAC,IACA;AAAA,QADAA,IACA,0BADO,IACP;;AAAA;;AACA,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,SAAL,GAAiB,KAAKH,IAAL,CAAUI,GAA3B;AACD;AACD;;;;;;;;gCAIYC,K,EAAOC,Q,EAAS;AAC1B,aAAOD,KAAK,CAACP,QAAN,IAAkB,KAAKK,SAA9B;AACD;AACD;;;;;;;;;;;;6BASSE,K,EAAOC,Q,EAAS,CACvB;AACA;AACA;AACD;;;;;;IAGGC,W;;;AACJ,yBAEO;AAAA,oFAAH,EAAG;AAAA,0BADLH,GACK;AAAA,QADLA,GACK,0BADC,IAAE,CACH;;AAAA;AAEN;;;;+BAEUI,I,EAAK;AACd,UAAMb,OAAO,GAAG,IAAII,OAAJ;AACdC,QAAAA,IAAI,EAAE;AADQ,SAEXQ,IAFW,EAAhB;AAIA,aAAOb,OAAP;AACD;;;6BAEO,CAAE,C,CACV;;;;uCACkB,CAAE;;;;;;eAGP;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACb;;;;AADa,8BAKHc,IALG,EAKE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAAA,IAAI,GAAGA,IAAI,CAACC,IAAL,KAAc,IAArB,CARa,CAQa;;AAC1B,UAAIC,MAAM,GAAGC,uBAAOC,IAAP,CAAYJ,IAAZ,EAAkBK,MAAlB,EAAb;;AACA,UAAGH,MAAM,CAACI,MAAP,GAAgB,CAAnB,EAAqB;AACnBC,QAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACI,MAAnB;AACD;;AACD,aAAO,KAAKG,SAAL,CAAeP,MAAf,CAAP;AACD;AACD;;;;AApBa;AAAA;AAAA,8BAuBHQ,IAvBG,EAuBE;AACb,UAAMC,WAAW,GAAG,IAAIb,WAAJ,EAApB,CADa,CAEb;;AACA,aAAOY,IAAP;AACD;AA3BY;AAAA;AAAA,0CA6BQ,CAAE;AA7BV;;AAAA;AAAA,M",
      "sourceRoot": "/Users/khauri/Documents/NFT/src",
      "sourcesContent": [
        "import parser from './NFT_Parser'\n\nclass Note {\n  constructor(){}\n  transpose(){}\n}\n\n/**\n * A Chord consists of one or more notes played simultaneously\n */\nclass Chord {\n  constructor(){\n    this.measure = null \n    this.staff = null\n    this.notes = []\n    this.duration = 1\n  }\n  static fromNotes(notes){\n\n  }\n}\n\nclass Measure {\n  constructor({\n    comp = null,\n    next = null, \n    prev = null\n  }){\n    this.comp = comp\n    this.next = next\n    this.prev = prev\n    this.beatsLeft = this.comp.bpm\n  }\n  /**\n   * \n   * @param {Chord} chord \n   */\n  canAddChord(chord, position){\n    return chord.duration <= this.beatsLeft\n  }\n  /**\n   * Adds a chord at a given position. If a chord is added at a \n   * position already occupied by a chord and the two chords have, \n   * the same duration, then the original chord will be replaced.\n   * If they do not have the same duration, then any subsequent chords\n   * in the measure may be removed if they cause the measure to overflow.\n   * @param {*} chord \n   * @param {*} position - defaults to the end of the measure\n   */\n  addChord(chord, position){\n    // If you try to add a chord that exceeds the total beats, \n    // then it will throw an error if there is a next measure\n    // otherwise a new measure will be added\n  }\n}\n\nclass Composition {\n  constructor({\n    bpm = 4/4\n  } = {}){\n\n  }\n\n  addMeasure(data){\n    const measure = new Measure({\n      comp: this, \n      ...data\n    })\n    return measure\n  }\n\n  toJSON(){}\n  // smaller filesize but more client-side work\n  toSimplifiedJSON(){}\n}\n\nexport default new class {\n  /** \n   * Parse String -> JSON -> Composition\n   * @param {String} text\n   */\n  parseText(text){\n    // const lines = text.split('\\n')\n    // let stream\n    // while(lines.length){\n    //   stream = parser.feed(lines.shift())\n    //   console.log(stream)\n    // }\n    // return stream\n    text = text.trim() + '\\n' // ensure file ends with newline\n    let result = parser.feed(text).finish()\n    if(result.length > 1){\n      console.log(result.length)\n    }\n    return this.parseJSON(result)\n  }\n  /**\n   * parse JSON string/obj -> Composition\n   */\n  parseJSON(json){\n    const composition = new Composition()\n    // TODO\n    return json\n  }\n  \n  parseSimplifiedJSON(){}\n}\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1566479066393
  },
  "{\"sourceRoot\":\"/Users/khauri/Documents/NFT/src/NFT_Parser\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/khauri/Documents/NFT\",\"filename\":\"/Users/khauri/Documents/NFT/src/NFT_Parser/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/khauri/Documents/NFT\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.5.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/khauri/Documents/NFT/src/NFT_Parser",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/khauri/Documents/NFT",
      "filename": "/Users/khauri/Documents/NFT/src/NFT_Parser/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/khauri/Documents/NFT",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/khauri/Documents/NFT/src/NFT_Parser/index.js",
        "plugins": [
          "dynamicImport",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/khauri/Documents/NFT/src/NFT_Parser/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/khauri/Documents/NFT/src/NFT_Parser",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _nearley = _interopRequireDefault(require(\"nearley\"));\n\nvar _grammar = _interopRequireDefault(require(\"./grammar\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar _default = new _nearley[\"default\"].Parser(_nearley[\"default\"].Grammar.fromCompiled(_grammar[\"default\"]));\n\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIm5lYXJsZXkiLCJQYXJzZXIiLCJHcmFtbWFyIiwiZnJvbUNvbXBpbGVkIiwiZ3JhbW1hciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7O2VBRWUsSUFBSUEsb0JBQVFDLE1BQVosQ0FBbUJELG9CQUFRRSxPQUFSLENBQWdCQyxZQUFoQixDQUE2QkMsbUJBQTdCLENBQW5CLEMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2toYXVyaS9Eb2N1bWVudHMvTkZUL3NyYy9ORlRfUGFyc2VyIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG5lYXJsZXkgZnJvbSAnbmVhcmxleSdcbmltcG9ydCBncmFtbWFyIGZyb20gJy4vZ3JhbW1hcidcblxuZXhwb3J0IGRlZmF1bHQgbmV3IG5lYXJsZXkuUGFyc2VyKG5lYXJsZXkuR3JhbW1hci5mcm9tQ29tcGlsZWQoZ3JhbW1hcikpIl19",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "nearley",
        "Parser",
        "Grammar",
        "fromCompiled",
        "grammar"
      ],
      "mappings": ";;;;;;;AAAA;;AACA;;;;eAEe,IAAIA,oBAAQC,MAAZ,CAAmBD,oBAAQE,OAAR,CAAgBC,YAAhB,CAA6BC,mBAA7B,CAAnB,C",
      "sourceRoot": "/Users/khauri/Documents/NFT/src/NFT_Parser",
      "sourcesContent": [
        "import nearley from 'nearley'\nimport grammar from './grammar'\n\nexport default new nearley.Parser(nearley.Grammar.fromCompiled(grammar))"
      ]
    },
    "sourceType": "script",
    "mtime": 1566426728648
  },
  "{\"sourceRoot\":\"/Users/khauri/Documents/NFT/src/NFT_Parser\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/khauri/Documents/NFT\",\"filename\":\"/Users/khauri/Documents/NFT/src/NFT_Parser/grammar.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/khauri/Documents/NFT\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.5.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/khauri/Documents/NFT/src/NFT_Parser",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/khauri/Documents/NFT",
      "filename": "/Users/khauri/Documents/NFT/src/NFT_Parser/grammar.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/khauri/Documents/NFT",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/khauri/Documents/NFT/src/NFT_Parser/grammar.js",
        "plugins": [
          "dynamicImport",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/khauri/Documents/NFT/src/NFT_Parser/grammar.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/khauri/Documents/NFT/src/NFT_Parser",
        "sourceFileName": "grammar.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n// Generated automatically by nearley, version 2.18.0\n// http://github.com/Hardmath123/nearley\n(function () {\n  function id(x) {\n    return x[0];\n  }\n\n  var parseOp = function parseOp(_ref) {\n    var _ref2 = _slicedToArray(_ref, 5),\n        a = _ref2[0],\n        op = _ref2[2],\n        b = _ref2[4];\n\n    return {\n      op: op[0],\n      a: a,\n      b: b\n    };\n  };\n\n  var grammar = {\n    Lexer: undefined,\n    ParserRules: [{\n      \"name\": \"unsigned_int$ebnf$1\",\n      \"symbols\": [/[0-9]/]\n    }, {\n      \"name\": \"unsigned_int$ebnf$1\",\n      \"symbols\": [\"unsigned_int$ebnf$1\", /[0-9]/],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"unsigned_int\",\n      \"symbols\": [\"unsigned_int$ebnf$1\"],\n      \"postprocess\": function postprocess(d) {\n        return parseInt(d[0].join(\"\"));\n      }\n    }, {\n      \"name\": \"int$ebnf$1$subexpression$1\",\n      \"symbols\": [{\n        \"literal\": \"-\"\n      }]\n    }, {\n      \"name\": \"int$ebnf$1$subexpression$1\",\n      \"symbols\": [{\n        \"literal\": \"+\"\n      }]\n    }, {\n      \"name\": \"int$ebnf$1\",\n      \"symbols\": [\"int$ebnf$1$subexpression$1\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"int$ebnf$1\",\n      \"symbols\": [],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }, {\n      \"name\": \"int$ebnf$2\",\n      \"symbols\": [/[0-9]/]\n    }, {\n      \"name\": \"int$ebnf$2\",\n      \"symbols\": [\"int$ebnf$2\", /[0-9]/],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"int\",\n      \"symbols\": [\"int$ebnf$1\", \"int$ebnf$2\"],\n      \"postprocess\": function postprocess(d) {\n        if (d[0]) {\n          return parseInt(d[0][0] + d[1].join(\"\"));\n        } else {\n          return parseInt(d[1].join(\"\"));\n        }\n      }\n    }, {\n      \"name\": \"unsigned_decimal$ebnf$1\",\n      \"symbols\": [/[0-9]/]\n    }, {\n      \"name\": \"unsigned_decimal$ebnf$1\",\n      \"symbols\": [\"unsigned_decimal$ebnf$1\", /[0-9]/],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"unsigned_decimal$ebnf$2$subexpression$1$ebnf$1\",\n      \"symbols\": [/[0-9]/]\n    }, {\n      \"name\": \"unsigned_decimal$ebnf$2$subexpression$1$ebnf$1\",\n      \"symbols\": [\"unsigned_decimal$ebnf$2$subexpression$1$ebnf$1\", /[0-9]/],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"unsigned_decimal$ebnf$2$subexpression$1\",\n      \"symbols\": [{\n        \"literal\": \".\"\n      }, \"unsigned_decimal$ebnf$2$subexpression$1$ebnf$1\"]\n    }, {\n      \"name\": \"unsigned_decimal$ebnf$2\",\n      \"symbols\": [\"unsigned_decimal$ebnf$2$subexpression$1\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"unsigned_decimal$ebnf$2\",\n      \"symbols\": [],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }, {\n      \"name\": \"unsigned_decimal\",\n      \"symbols\": [\"unsigned_decimal$ebnf$1\", \"unsigned_decimal$ebnf$2\"],\n      \"postprocess\": function postprocess(d) {\n        return parseFloat(d[0].join(\"\") + (d[1] ? \".\" + d[1][1].join(\"\") : \"\"));\n      }\n    }, {\n      \"name\": \"decimal$ebnf$1\",\n      \"symbols\": [{\n        \"literal\": \"-\"\n      }],\n      \"postprocess\": id\n    }, {\n      \"name\": \"decimal$ebnf$1\",\n      \"symbols\": [],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }, {\n      \"name\": \"decimal$ebnf$2\",\n      \"symbols\": [/[0-9]/]\n    }, {\n      \"name\": \"decimal$ebnf$2\",\n      \"symbols\": [\"decimal$ebnf$2\", /[0-9]/],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"decimal$ebnf$3$subexpression$1$ebnf$1\",\n      \"symbols\": [/[0-9]/]\n    }, {\n      \"name\": \"decimal$ebnf$3$subexpression$1$ebnf$1\",\n      \"symbols\": [\"decimal$ebnf$3$subexpression$1$ebnf$1\", /[0-9]/],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"decimal$ebnf$3$subexpression$1\",\n      \"symbols\": [{\n        \"literal\": \".\"\n      }, \"decimal$ebnf$3$subexpression$1$ebnf$1\"]\n    }, {\n      \"name\": \"decimal$ebnf$3\",\n      \"symbols\": [\"decimal$ebnf$3$subexpression$1\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"decimal$ebnf$3\",\n      \"symbols\": [],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }, {\n      \"name\": \"decimal\",\n      \"symbols\": [\"decimal$ebnf$1\", \"decimal$ebnf$2\", \"decimal$ebnf$3\"],\n      \"postprocess\": function postprocess(d) {\n        return parseFloat((d[0] || \"\") + d[1].join(\"\") + (d[2] ? \".\" + d[2][1].join(\"\") : \"\"));\n      }\n    }, {\n      \"name\": \"percentage\",\n      \"symbols\": [\"decimal\", {\n        \"literal\": \"%\"\n      }],\n      \"postprocess\": function postprocess(d) {\n        return d[0] / 100;\n      }\n    }, {\n      \"name\": \"jsonfloat$ebnf$1\",\n      \"symbols\": [{\n        \"literal\": \"-\"\n      }],\n      \"postprocess\": id\n    }, {\n      \"name\": \"jsonfloat$ebnf$1\",\n      \"symbols\": [],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }, {\n      \"name\": \"jsonfloat$ebnf$2\",\n      \"symbols\": [/[0-9]/]\n    }, {\n      \"name\": \"jsonfloat$ebnf$2\",\n      \"symbols\": [\"jsonfloat$ebnf$2\", /[0-9]/],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"jsonfloat$ebnf$3$subexpression$1$ebnf$1\",\n      \"symbols\": [/[0-9]/]\n    }, {\n      \"name\": \"jsonfloat$ebnf$3$subexpression$1$ebnf$1\",\n      \"symbols\": [\"jsonfloat$ebnf$3$subexpression$1$ebnf$1\", /[0-9]/],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"jsonfloat$ebnf$3$subexpression$1\",\n      \"symbols\": [{\n        \"literal\": \".\"\n      }, \"jsonfloat$ebnf$3$subexpression$1$ebnf$1\"]\n    }, {\n      \"name\": \"jsonfloat$ebnf$3\",\n      \"symbols\": [\"jsonfloat$ebnf$3$subexpression$1\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"jsonfloat$ebnf$3\",\n      \"symbols\": [],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }, {\n      \"name\": \"jsonfloat$ebnf$4$subexpression$1$ebnf$1\",\n      \"symbols\": [/[+-]/],\n      \"postprocess\": id\n    }, {\n      \"name\": \"jsonfloat$ebnf$4$subexpression$1$ebnf$1\",\n      \"symbols\": [],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }, {\n      \"name\": \"jsonfloat$ebnf$4$subexpression$1$ebnf$2\",\n      \"symbols\": [/[0-9]/]\n    }, {\n      \"name\": \"jsonfloat$ebnf$4$subexpression$1$ebnf$2\",\n      \"symbols\": [\"jsonfloat$ebnf$4$subexpression$1$ebnf$2\", /[0-9]/],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"jsonfloat$ebnf$4$subexpression$1\",\n      \"symbols\": [/[eE]/, \"jsonfloat$ebnf$4$subexpression$1$ebnf$1\", \"jsonfloat$ebnf$4$subexpression$1$ebnf$2\"]\n    }, {\n      \"name\": \"jsonfloat$ebnf$4\",\n      \"symbols\": [\"jsonfloat$ebnf$4$subexpression$1\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"jsonfloat$ebnf$4\",\n      \"symbols\": [],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }, {\n      \"name\": \"jsonfloat\",\n      \"symbols\": [\"jsonfloat$ebnf$1\", \"jsonfloat$ebnf$2\", \"jsonfloat$ebnf$3\", \"jsonfloat$ebnf$4\"],\n      \"postprocess\": function postprocess(d) {\n        return parseFloat((d[0] || \"\") + d[1].join(\"\") + (d[2] ? \".\" + d[2][1].join(\"\") : \"\") + (d[3] ? \"e\" + (d[3][1] || \"+\") + d[3][2].join(\"\") : \"\"));\n      }\n    }, {\n      \"name\": \"_$ebnf$1\",\n      \"symbols\": []\n    }, {\n      \"name\": \"_$ebnf$1\",\n      \"symbols\": [\"_$ebnf$1\", \"wschar\"],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"_\",\n      \"symbols\": [\"_$ebnf$1\"],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }, {\n      \"name\": \"__$ebnf$1\",\n      \"symbols\": [\"wschar\"]\n    }, {\n      \"name\": \"__$ebnf$1\",\n      \"symbols\": [\"__$ebnf$1\", \"wschar\"],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"__\",\n      \"symbols\": [\"__$ebnf$1\"],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }, {\n      \"name\": \"wschar\",\n      \"symbols\": [/[ \\t\\n\\v\\f]/],\n      \"postprocess\": id\n    }, {\n      \"name\": \"main$ebnf$1\",\n      \"symbols\": []\n    }, {\n      \"name\": \"main$ebnf$1\",\n      \"symbols\": [\"main$ebnf$1\", \"body\"],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"main\",\n      \"symbols\": [\"kv_pairs\", \"main$ebnf$1\"],\n      \"postprocess\": function postprocess(_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            head = _ref4[0],\n            body = _ref4[1];\n\n        return {\n          head: head,\n          body: body\n        };\n      }\n    }, {\n      \"name\": \"kv_pairs$ebnf$1\",\n      \"symbols\": []\n    }, {\n      \"name\": \"kv_pairs$ebnf$1\",\n      \"symbols\": [\"kv_pairs$ebnf$1\", \"kv_pair\"],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"kv_pairs\",\n      \"symbols\": [\"kv_pairs$ebnf$1\"],\n      \"postprocess\": function postprocess(_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 1),\n            kvs = _ref6[0];\n\n        return kvs.reduce(function (acc, next) {\n          return acc[next[0]] = next[1], acc;\n        }, {});\n      }\n    }, {\n      \"name\": \"kv_pair\",\n      \"symbols\": [\"_\", \"identifier\", \"_\", {\n        \"literal\": \":\"\n      }, \"_\", \"value\", \"_\", \"eol\"],\n      \"postprocess\": function postprocess(_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 6),\n            id = _ref8[1],\n            val = _ref8[5];\n\n        return [id, val];\n      }\n    }, {\n      \"name\": \"body$ebnf$1\",\n      \"symbols\": [\"lyric\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"body$ebnf$1\",\n      \"symbols\": [],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }, {\n      \"name\": \"body\",\n      \"symbols\": [\"expressions\", \"_\", \"eol\", \"body$ebnf$1\"],\n      \"postprocess\": function postprocess(_ref9) {\n        var _ref10 = _slicedToArray(_ref9, 4),\n            expr = _ref10[0],\n            lyric = _ref10[3];\n\n        return {\n          expr: expr,\n          lyric: lyric\n        };\n      }\n    }, {\n      \"name\": \"_label\",\n      \"symbols\": [/[^\\]]/]\n    }, {\n      \"name\": \"label\",\n      \"symbols\": [{\n        \"literal\": \"[\"\n      }, \"_label\", {\n        \"literal\": \"]\"\n      }]\n    }, {\n      \"name\": \"nonlyric\",\n      \"symbols\": [{\n        \"literal\": \"#\"\n      }],\n      \"postprocess\": function postprocess() {\n        return '';\n      }\n    }, {\n      \"name\": \"nonlyric\",\n      \"symbols\": [/[^A-GR]/],\n      \"postprocess\": id\n    }, {\n      \"name\": \"lyric\",\n      \"symbols\": [\"nonlyric\", \"str\", \"eol\"],\n      \"postprocess\": function postprocess(_ref11) {\n        var _ref12 = _slicedToArray(_ref11, 2),\n            nl = _ref12[0],\n            line = _ref12[1];\n\n        return nl + line;\n      }\n    }, {\n      \"name\": \"expressions$ebnf$1\",\n      \"symbols\": []\n    }, {\n      \"name\": \"expressions$ebnf$1$subexpression$1\",\n      \"symbols\": [\"__\", \"sum\"]\n    }, {\n      \"name\": \"expressions$ebnf$1\",\n      \"symbols\": [\"expressions$ebnf$1\", \"expressions$ebnf$1$subexpression$1\"],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"expressions\",\n      \"symbols\": [\"sum\", \"expressions$ebnf$1\"],\n      \"postprocess\": function postprocess(_ref13) {\n        var _ref14 = _slicedToArray(_ref13, 2),\n            s1 = _ref14[0],\n            s2 = _ref14[1];\n\n        return [s1].concat(_toConsumableArray(s2));\n      }\n    }, {\n      \"name\": \"sum\",\n      \"symbols\": [\"sum\", \"_\", \"addOp\", \"_\", \"product\"],\n      \"postprocess\": parseOp\n    }, {\n      \"name\": \"sum\",\n      \"symbols\": [\"product\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"product\",\n      \"symbols\": [\"product\", \"_\", \"mulOp\", \"_\", \"exp\"],\n      \"postprocess\": parseOp\n    }, {\n      \"name\": \"product\",\n      \"symbols\": [\"exp\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"exp\",\n      \"symbols\": [\"terminal\", \"_\", \"expOp\", \"_\", \"exp\"],\n      \"postprocess\": parseOp\n    }, {\n      \"name\": \"exp\",\n      \"symbols\": [\"terminal\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"terminal\",\n      \"symbols\": [\"int\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"terminal\",\n      \"symbols\": [\"chord\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"mulOp\",\n      \"symbols\": [{\n        \"literal\": \"*\"\n      }]\n    }, {\n      \"name\": \"mulOp\",\n      \"symbols\": [{\n        \"literal\": \"/\"\n      }],\n      \"postprocess\": id\n    }, {\n      \"name\": \"addOp\",\n      \"symbols\": [{\n        \"literal\": \"+\"\n      }]\n    }, {\n      \"name\": \"addOp\",\n      \"symbols\": [{\n        \"literal\": \"-\"\n      }],\n      \"postprocess\": id\n    }, {\n      \"name\": \"expOp$string$1\",\n      \"symbols\": [{\n        \"literal\": \"*\"\n      }, {\n        \"literal\": \"*\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"expOp\",\n      \"symbols\": [\"expOp$string$1\"]\n    }, {\n      \"name\": \"expOp\",\n      \"symbols\": [{\n        \"literal\": \"^\"\n      }],\n      \"postprocess\": id\n    }, {\n      \"name\": \"chord$ebnf$1\",\n      \"symbols\": [\"mod\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"chord$ebnf$1\",\n      \"symbols\": [],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }, {\n      \"name\": \"chord\",\n      \"symbols\": [\"note\", \"chord$ebnf$1\"],\n      \"postprocess\": function postprocess(_ref15) {\n        var _ref16 = _slicedToArray(_ref15, 2),\n            root = _ref16[0],\n            mod = _ref16[1];\n\n        return {\n          root: root,\n          mod: mod\n        };\n      }\n    }, {\n      \"name\": \"chord\",\n      \"symbols\": [\"rest_id\"]\n    }, {\n      \"name\": \"chord$ebnf$2\",\n      \"symbols\": []\n    }, {\n      \"name\": \"chord$ebnf$2\",\n      \"symbols\": [\"chord$ebnf$2\", \"subchord\"],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"chord\",\n      \"symbols\": [{\n        \"literal\": \"{\"\n      }, \"note\", \"_\", \"chord$ebnf$2\", {\n        \"literal\": \"}\"\n      }],\n      \"postprocess\": function postprocess(d) {\n        return [d[1]].concat(_toConsumableArray(d[3]));\n      }\n    }, {\n      \"name\": \"subchord\",\n      \"symbols\": [\"separator\", \"_\", \"note\"],\n      \"postprocess\": function postprocess(d) {\n        return d[2];\n      }\n    }, {\n      \"name\": \"note$ebnf$1\",\n      \"symbols\": [\"accidental\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"note$ebnf$1\",\n      \"symbols\": [],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }, {\n      \"name\": \"note$ebnf$2\",\n      \"symbols\": [\"int\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"note$ebnf$2\",\n      \"symbols\": [],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }, {\n      \"name\": \"note\",\n      \"symbols\": [\"note_id\", \"note$ebnf$1\", \"note$ebnf$2\"]\n    }, {\n      \"name\": \"mod_name$string$1\",\n      \"symbols\": [{\n        \"literal\": \"a\"\n      }, {\n        \"literal\": \"d\"\n      }, {\n        \"literal\": \"d\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"mod_name\",\n      \"symbols\": [\"mod_name$string$1\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"mod_name$string$2\",\n      \"symbols\": [{\n        \"literal\": \"f\"\n      }, {\n        \"literal\": \"i\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"mod_name\",\n      \"symbols\": [\"mod_name$string$2\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"mod_name$string$3\",\n      \"symbols\": [{\n        \"literal\": \"n\"\n      }, {\n        \"literal\": \"o\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"mod_name\",\n      \"symbols\": [\"mod_name$string$3\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"mod_name$string$4\",\n      \"symbols\": [{\n        \"literal\": \"s\"\n      }, {\n        \"literal\": \"i\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"mod_name\",\n      \"symbols\": [\"mod_name$string$4\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"mod_name$string$5\",\n      \"symbols\": [{\n        \"literal\": \"t\"\n      }, {\n        \"literal\": \"h\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"mod_name\",\n      \"symbols\": [\"mod_name$string$5\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"mod_name$subexpression$1\",\n      \"symbols\": [/[sS]/, /[uU]/, /[sS]/],\n      \"postprocess\": function postprocess(d) {\n        return d.join(\"\");\n      }\n    }, {\n      \"name\": \"mod_name$ebnf$1$subexpression$1\",\n      \"symbols\": [/[sS]/, /[tT]/, /[aA]/, /[iI]/, /[nN]/, /[eE]/, /[dD]/],\n      \"postprocess\": function postprocess(d) {\n        return d.join(\"\");\n      }\n    }, {\n      \"name\": \"mod_name$ebnf$1\",\n      \"symbols\": [\"mod_name$ebnf$1$subexpression$1\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"mod_name$ebnf$1\",\n      \"symbols\": [],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }, {\n      \"name\": \"mod_name\",\n      \"symbols\": [\"mod_name$subexpression$1\", \"mod_name$ebnf$1\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"mod_name$subexpression$2\",\n      \"symbols\": [/[aA]/, /[uU]/, /[gG]/],\n      \"postprocess\": function postprocess(d) {\n        return d.join(\"\");\n      }\n    }, {\n      \"name\": \"mod_name$ebnf$2$subexpression$1\",\n      \"symbols\": [/[mM]/, /[eE]/, /[nN]/, /[tT]/, /[eE]/, /[dD]/],\n      \"postprocess\": function postprocess(d) {\n        return d.join(\"\");\n      }\n    }, {\n      \"name\": \"mod_name$ebnf$2\",\n      \"symbols\": [\"mod_name$ebnf$2$subexpression$1\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"mod_name$ebnf$2\",\n      \"symbols\": [],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }, {\n      \"name\": \"mod_name\",\n      \"symbols\": [\"mod_name$subexpression$2\", \"mod_name$ebnf$2\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"mod_name$subexpression$3\",\n      \"symbols\": [/[dD]/, /[iI]/, /[mM]/],\n      \"postprocess\": function postprocess(d) {\n        return d.join(\"\");\n      }\n    }, {\n      \"name\": \"mod_name$ebnf$3$subexpression$1\",\n      \"symbols\": [/[iI]/, /[nN]/, /[iI]/, /[sS]/, /[hH]/, /[eE]/, /[dD]/],\n      \"postprocess\": function postprocess(d) {\n        return d.join(\"\");\n      }\n    }, {\n      \"name\": \"mod_name$ebnf$3\",\n      \"symbols\": [\"mod_name$ebnf$3$subexpression$1\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"mod_name$ebnf$3\",\n      \"symbols\": [],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }, {\n      \"name\": \"mod_name\",\n      \"symbols\": [\"mod_name$subexpression$3\", \"mod_name$ebnf$3\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"mod_name$subexpression$4\",\n      \"symbols\": [/[dD]/, /[oO]/, /[mM]/],\n      \"postprocess\": function postprocess(d) {\n        return d.join(\"\");\n      }\n    }, {\n      \"name\": \"mod_name$ebnf$4$subexpression$1\",\n      \"symbols\": [/[iI]/, /[nN]/, /[aA]/, /[nN]/, /[tT]/],\n      \"postprocess\": function postprocess(d) {\n        return d.join(\"\");\n      }\n    }, {\n      \"name\": \"mod_name$ebnf$4\",\n      \"symbols\": [\"mod_name$ebnf$4$subexpression$1\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"mod_name$ebnf$4\",\n      \"symbols\": [],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }, {\n      \"name\": \"mod_name\",\n      \"symbols\": [\"mod_name$subexpression$4\", \"mod_name$ebnf$4\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"mod_name$subexpression$5\",\n      \"symbols\": [/[mM]/, /[iI]/, /[nN]/],\n      \"postprocess\": function postprocess(d) {\n        return d.join(\"\");\n      }\n    }, {\n      \"name\": \"mod_name$ebnf$5$string$1\",\n      \"symbols\": [{\n        \"literal\": \"o\"\n      }, {\n        \"literal\": \"r\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"mod_name$ebnf$5\",\n      \"symbols\": [\"mod_name$ebnf$5$string$1\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"mod_name$ebnf$5\",\n      \"symbols\": [],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }, {\n      \"name\": \"mod_name\",\n      \"symbols\": [\"mod_name$subexpression$5\", \"mod_name$ebnf$5\"]\n    }, {\n      \"name\": \"mod_name\",\n      \"symbols\": [{\n        \"literal\": \"m\"\n      }],\n      \"postprocess\": id\n    }, {\n      \"name\": \"mod_name$subexpression$6\",\n      \"symbols\": [/[mM]/, /[aA]/, /[jJ]/],\n      \"postprocess\": function postprocess(d) {\n        return d.join(\"\");\n      }\n    }, {\n      \"name\": \"mod_name$ebnf$6$string$1\",\n      \"symbols\": [{\n        \"literal\": \"o\"\n      }, {\n        \"literal\": \"r\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"mod_name$ebnf$6\",\n      \"symbols\": [\"mod_name$ebnf$6$string$1\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"mod_name$ebnf$6\",\n      \"symbols\": [],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }, {\n      \"name\": \"mod_name\",\n      \"symbols\": [\"mod_name$subexpression$6\", \"mod_name$ebnf$6\"]\n    }, {\n      \"name\": \"mod_name\",\n      \"symbols\": [{\n        \"literal\": \"M\"\n      }],\n      \"postprocess\": id\n    }, {\n      \"name\": \"mod$ebnf$1\",\n      \"symbols\": [\"int\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"mod$ebnf$1\",\n      \"symbols\": [],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }, {\n      \"name\": \"mod\",\n      \"symbols\": [\"mod_name\", \"mod$ebnf$1\"]\n    }, {\n      \"name\": \"rest_id\",\n      \"symbols\": [{\n        \"literal\": \"R\"\n      }],\n      \"postprocess\": id\n    }, {\n      \"name\": \"note_id\",\n      \"symbols\": [/[A-G]/],\n      \"postprocess\": id\n    }, {\n      \"name\": \"accidental\",\n      \"symbols\": [{\n        \"literal\": \"#\"\n      }],\n      \"postprocess\": id\n    }, {\n      \"name\": \"accidental\",\n      \"symbols\": [{\n        \"literal\": \"b\"\n      }],\n      \"postprocess\": id\n    }, {\n      \"name\": \"separator\",\n      \"symbols\": [{\n        \"literal\": \",\"\n      }]\n    }, {\n      \"name\": \"separator\",\n      \"symbols\": [\"__\"],\n      \"postprocess\": function postprocess() {\n        return null;\n      }\n    }, {\n      \"name\": \"eol\",\n      \"symbols\": [{\n        \"literal\": \"\\r\"\n      }, {\n        \"literal\": \"\\n\"\n      }],\n      \"postprocess\": function postprocess() {\n        return null;\n      }\n    }, {\n      \"name\": \"eol\",\n      \"symbols\": [{\n        \"literal\": \"\\r\"\n      }]\n    }, {\n      \"name\": \"eol\",\n      \"symbols\": [{\n        \"literal\": \"\\n\"\n      }],\n      \"postprocess\": function postprocess() {\n        return null;\n      }\n    }, {\n      \"name\": \"identifier$ebnf$1\",\n      \"symbols\": []\n    }, {\n      \"name\": \"identifier$ebnf$1\",\n      \"symbols\": [\"identifier$ebnf$1\", /[^ :]/],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"identifier\",\n      \"symbols\": [/[A-Za-z0-9_@$]/, \"identifier$ebnf$1\"],\n      \"postprocess\": function postprocess(d) {\n        return d[0] + d[1].join(\"\");\n      }\n    }, {\n      \"name\": \"value$ebnf$1\",\n      \"symbols\": []\n    }, {\n      \"name\": \"value$ebnf$1\",\n      \"symbols\": [\"value$ebnf$1\", /[^\\n\\r]/],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"value\",\n      \"symbols\": [/[^ ]/, \"value$ebnf$1\"],\n      \"postprocess\": function postprocess(d) {\n        return d[0] + d[1].join(\"\");\n      }\n    }, {\n      \"name\": \"ws$ebnf$1\",\n      \"symbols\": []\n    }, {\n      \"name\": \"ws$ebnf$1\",\n      \"symbols\": [\"ws$ebnf$1\", /[ \\s\\t\\v]/],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"ws\",\n      \"symbols\": [\"ws$ebnf$1\"],\n      \"postprocess\": function postprocess() {\n        return null;\n      }\n    }, {\n      \"name\": \"str$ebnf$1\",\n      \"symbols\": [/[^\\n\\r]/]\n    }, {\n      \"name\": \"str$ebnf$1\",\n      \"symbols\": [\"str$ebnf$1\", /[^\\n\\r]/],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"str\",\n      \"symbols\": [\"str$ebnf$1\"],\n      \"postprocess\": function postprocess(d) {\n        return d[0].join(\"\");\n      }\n    }],\n    ParserStart: \"main\"\n  };\n\n  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n    module.exports = grammar;\n  } else {\n    window.grammar = grammar;\n  }\n})();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "grammar.js"
      ],
      "names": [
        "id",
        "x",
        "parseOp",
        "a",
        "op",
        "b",
        "grammar",
        "Lexer",
        "undefined",
        "ParserRules",
        "arrpush",
        "d",
        "concat",
        "parseInt",
        "join",
        "parseFloat",
        "head",
        "body",
        "kvs",
        "reduce",
        "acc",
        "next",
        "val",
        "expr",
        "lyric",
        "nl",
        "line",
        "s1",
        "s2",
        "joiner",
        "root",
        "mod",
        "ParserStart",
        "module",
        "exports",
        "window"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/khauri/Documents/NFT/src/NFT_Parser",
      "sourcesContent": [
        "// Generated automatically by nearley, version 2.18.0\n// http://github.com/Hardmath123/nearley\n(function () {\nfunction id(x) { return x[0]; }\n\n  const parseOp = ([a,,op,,b]) => ({op:op[0], a, b})\nvar grammar = {\n    Lexer: undefined,\n    ParserRules: [\n    {\"name\": \"unsigned_int$ebnf$1\", \"symbols\": [/[0-9]/]},\n    {\"name\": \"unsigned_int$ebnf$1\", \"symbols\": [\"unsigned_int$ebnf$1\", /[0-9]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"unsigned_int\", \"symbols\": [\"unsigned_int$ebnf$1\"], \"postprocess\": \n        function(d) {\n            return parseInt(d[0].join(\"\"));\n        }\n        },\n    {\"name\": \"int$ebnf$1$subexpression$1\", \"symbols\": [{\"literal\":\"-\"}]},\n    {\"name\": \"int$ebnf$1$subexpression$1\", \"symbols\": [{\"literal\":\"+\"}]},\n    {\"name\": \"int$ebnf$1\", \"symbols\": [\"int$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"int$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"int$ebnf$2\", \"symbols\": [/[0-9]/]},\n    {\"name\": \"int$ebnf$2\", \"symbols\": [\"int$ebnf$2\", /[0-9]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"int\", \"symbols\": [\"int$ebnf$1\", \"int$ebnf$2\"], \"postprocess\": \n        function(d) {\n            if (d[0]) {\n                return parseInt(d[0][0]+d[1].join(\"\"));\n            } else {\n                return parseInt(d[1].join(\"\"));\n            }\n        }\n        },\n    {\"name\": \"unsigned_decimal$ebnf$1\", \"symbols\": [/[0-9]/]},\n    {\"name\": \"unsigned_decimal$ebnf$1\", \"symbols\": [\"unsigned_decimal$ebnf$1\", /[0-9]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"unsigned_decimal$ebnf$2$subexpression$1$ebnf$1\", \"symbols\": [/[0-9]/]},\n    {\"name\": \"unsigned_decimal$ebnf$2$subexpression$1$ebnf$1\", \"symbols\": [\"unsigned_decimal$ebnf$2$subexpression$1$ebnf$1\", /[0-9]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"unsigned_decimal$ebnf$2$subexpression$1\", \"symbols\": [{\"literal\":\".\"}, \"unsigned_decimal$ebnf$2$subexpression$1$ebnf$1\"]},\n    {\"name\": \"unsigned_decimal$ebnf$2\", \"symbols\": [\"unsigned_decimal$ebnf$2$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"unsigned_decimal$ebnf$2\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"unsigned_decimal\", \"symbols\": [\"unsigned_decimal$ebnf$1\", \"unsigned_decimal$ebnf$2\"], \"postprocess\": \n        function(d) {\n            return parseFloat(\n                d[0].join(\"\") +\n                (d[1] ? \".\"+d[1][1].join(\"\") : \"\")\n            );\n        }\n        },\n    {\"name\": \"decimal$ebnf$1\", \"symbols\": [{\"literal\":\"-\"}], \"postprocess\": id},\n    {\"name\": \"decimal$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"decimal$ebnf$2\", \"symbols\": [/[0-9]/]},\n    {\"name\": \"decimal$ebnf$2\", \"symbols\": [\"decimal$ebnf$2\", /[0-9]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"decimal$ebnf$3$subexpression$1$ebnf$1\", \"symbols\": [/[0-9]/]},\n    {\"name\": \"decimal$ebnf$3$subexpression$1$ebnf$1\", \"symbols\": [\"decimal$ebnf$3$subexpression$1$ebnf$1\", /[0-9]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"decimal$ebnf$3$subexpression$1\", \"symbols\": [{\"literal\":\".\"}, \"decimal$ebnf$3$subexpression$1$ebnf$1\"]},\n    {\"name\": \"decimal$ebnf$3\", \"symbols\": [\"decimal$ebnf$3$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"decimal$ebnf$3\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"decimal\", \"symbols\": [\"decimal$ebnf$1\", \"decimal$ebnf$2\", \"decimal$ebnf$3\"], \"postprocess\": \n        function(d) {\n            return parseFloat(\n                (d[0] || \"\") +\n                d[1].join(\"\") +\n                (d[2] ? \".\"+d[2][1].join(\"\") : \"\")\n            );\n        }\n        },\n    {\"name\": \"percentage\", \"symbols\": [\"decimal\", {\"literal\":\"%\"}], \"postprocess\": \n        function(d) {\n            return d[0]/100;\n        }\n        },\n    {\"name\": \"jsonfloat$ebnf$1\", \"symbols\": [{\"literal\":\"-\"}], \"postprocess\": id},\n    {\"name\": \"jsonfloat$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"jsonfloat$ebnf$2\", \"symbols\": [/[0-9]/]},\n    {\"name\": \"jsonfloat$ebnf$2\", \"symbols\": [\"jsonfloat$ebnf$2\", /[0-9]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"jsonfloat$ebnf$3$subexpression$1$ebnf$1\", \"symbols\": [/[0-9]/]},\n    {\"name\": \"jsonfloat$ebnf$3$subexpression$1$ebnf$1\", \"symbols\": [\"jsonfloat$ebnf$3$subexpression$1$ebnf$1\", /[0-9]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"jsonfloat$ebnf$3$subexpression$1\", \"symbols\": [{\"literal\":\".\"}, \"jsonfloat$ebnf$3$subexpression$1$ebnf$1\"]},\n    {\"name\": \"jsonfloat$ebnf$3\", \"symbols\": [\"jsonfloat$ebnf$3$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"jsonfloat$ebnf$3\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"jsonfloat$ebnf$4$subexpression$1$ebnf$1\", \"symbols\": [/[+-]/], \"postprocess\": id},\n    {\"name\": \"jsonfloat$ebnf$4$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"jsonfloat$ebnf$4$subexpression$1$ebnf$2\", \"symbols\": [/[0-9]/]},\n    {\"name\": \"jsonfloat$ebnf$4$subexpression$1$ebnf$2\", \"symbols\": [\"jsonfloat$ebnf$4$subexpression$1$ebnf$2\", /[0-9]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"jsonfloat$ebnf$4$subexpression$1\", \"symbols\": [/[eE]/, \"jsonfloat$ebnf$4$subexpression$1$ebnf$1\", \"jsonfloat$ebnf$4$subexpression$1$ebnf$2\"]},\n    {\"name\": \"jsonfloat$ebnf$4\", \"symbols\": [\"jsonfloat$ebnf$4$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"jsonfloat$ebnf$4\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"jsonfloat\", \"symbols\": [\"jsonfloat$ebnf$1\", \"jsonfloat$ebnf$2\", \"jsonfloat$ebnf$3\", \"jsonfloat$ebnf$4\"], \"postprocess\": \n        function(d) {\n            return parseFloat(\n                (d[0] || \"\") +\n                d[1].join(\"\") +\n                (d[2] ? \".\"+d[2][1].join(\"\") : \"\") +\n                (d[3] ? \"e\" + (d[3][1] || \"+\") + d[3][2].join(\"\") : \"\")\n            );\n        }\n        },\n    {\"name\": \"_$ebnf$1\", \"symbols\": []},\n    {\"name\": \"_$ebnf$1\", \"symbols\": [\"_$ebnf$1\", \"wschar\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"_\", \"symbols\": [\"_$ebnf$1\"], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"__$ebnf$1\", \"symbols\": [\"wschar\"]},\n    {\"name\": \"__$ebnf$1\", \"symbols\": [\"__$ebnf$1\", \"wschar\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"__\", \"symbols\": [\"__$ebnf$1\"], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"wschar\", \"symbols\": [/[ \\t\\n\\v\\f]/], \"postprocess\": id},\n    {\"name\": \"main$ebnf$1\", \"symbols\": []},\n    {\"name\": \"main$ebnf$1\", \"symbols\": [\"main$ebnf$1\", \"body\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"main\", \"symbols\": [\"kv_pairs\", \"main$ebnf$1\"], \"postprocess\": ([head, body])=> ({ head, body })},\n    {\"name\": \"kv_pairs$ebnf$1\", \"symbols\": []},\n    {\"name\": \"kv_pairs$ebnf$1\", \"symbols\": [\"kv_pairs$ebnf$1\", \"kv_pair\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"kv_pairs\", \"symbols\": [\"kv_pairs$ebnf$1\"], \"postprocess\": ([kvs]) => kvs.reduce((acc,next)=>(acc[next[0]] = next[1], acc), {})},\n    {\"name\": \"kv_pair\", \"symbols\": [\"_\", \"identifier\", \"_\", {\"literal\":\":\"}, \"_\", \"value\", \"_\", \"eol\"], \"postprocess\": ([,id,,,,val]) => [id, val]},\n    {\"name\": \"body$ebnf$1\", \"symbols\": [\"lyric\"], \"postprocess\": id},\n    {\"name\": \"body$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"body\", \"symbols\": [\"expressions\", \"_\", \"eol\", \"body$ebnf$1\"], \"postprocess\": ([expr,,,lyric])=> ({expr, lyric})},\n    {\"name\": \"_label\", \"symbols\": [/[^\\]]/]},\n    {\"name\": \"label\", \"symbols\": [{\"literal\":\"[\"}, \"_label\", {\"literal\":\"]\"}]},\n    {\"name\": \"nonlyric\", \"symbols\": [{\"literal\":\"#\"}], \"postprocess\": () => ''},\n    {\"name\": \"nonlyric\", \"symbols\": [/[^A-GR]/], \"postprocess\": id},\n    {\"name\": \"lyric\", \"symbols\": [\"nonlyric\", \"str\", \"eol\"], \"postprocess\": ([nl,line]) => nl + line},\n    {\"name\": \"expressions$ebnf$1\", \"symbols\": []},\n    {\"name\": \"expressions$ebnf$1$subexpression$1\", \"symbols\": [\"__\", \"sum\"]},\n    {\"name\": \"expressions$ebnf$1\", \"symbols\": [\"expressions$ebnf$1\", \"expressions$ebnf$1$subexpression$1\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"expressions\", \"symbols\": [\"sum\", \"expressions$ebnf$1\"], \"postprocess\": ([s1,s2])=> [s1, ...s2]},\n    {\"name\": \"sum\", \"symbols\": [\"sum\", \"_\", \"addOp\", \"_\", \"product\"], \"postprocess\": parseOp},\n    {\"name\": \"sum\", \"symbols\": [\"product\"], \"postprocess\": id},\n    {\"name\": \"product\", \"symbols\": [\"product\", \"_\", \"mulOp\", \"_\", \"exp\"], \"postprocess\": parseOp},\n    {\"name\": \"product\", \"symbols\": [\"exp\"], \"postprocess\": id},\n    {\"name\": \"exp\", \"symbols\": [\"terminal\", \"_\", \"expOp\", \"_\", \"exp\"], \"postprocess\": parseOp},\n    {\"name\": \"exp\", \"symbols\": [\"terminal\"], \"postprocess\": id},\n    {\"name\": \"terminal\", \"symbols\": [\"int\"], \"postprocess\": id},\n    {\"name\": \"terminal\", \"symbols\": [\"chord\"], \"postprocess\": id},\n    {\"name\": \"mulOp\", \"symbols\": [{\"literal\":\"*\"}]},\n    {\"name\": \"mulOp\", \"symbols\": [{\"literal\":\"/\"}], \"postprocess\": id},\n    {\"name\": \"addOp\", \"symbols\": [{\"literal\":\"+\"}]},\n    {\"name\": \"addOp\", \"symbols\": [{\"literal\":\"-\"}], \"postprocess\": id},\n    {\"name\": \"expOp$string$1\", \"symbols\": [{\"literal\":\"*\"}, {\"literal\":\"*\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"expOp\", \"symbols\": [\"expOp$string$1\"]},\n    {\"name\": \"expOp\", \"symbols\": [{\"literal\":\"^\"}], \"postprocess\": id},\n    {\"name\": \"chord$ebnf$1\", \"symbols\": [\"mod\"], \"postprocess\": id},\n    {\"name\": \"chord$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"chord\", \"symbols\": [\"note\", \"chord$ebnf$1\"], \"postprocess\": ([root, mod]) => ({root, mod})},\n    {\"name\": \"chord\", \"symbols\": [\"rest_id\"]},\n    {\"name\": \"chord$ebnf$2\", \"symbols\": []},\n    {\"name\": \"chord$ebnf$2\", \"symbols\": [\"chord$ebnf$2\", \"subchord\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"chord\", \"symbols\": [{\"literal\":\"{\"}, \"note\", \"_\", \"chord$ebnf$2\", {\"literal\":\"}\"}], \"postprocess\": d => [d[1], ...d[3]]},\n    {\"name\": \"subchord\", \"symbols\": [\"separator\", \"_\", \"note\"], \"postprocess\": d => d[2]},\n    {\"name\": \"note$ebnf$1\", \"symbols\": [\"accidental\"], \"postprocess\": id},\n    {\"name\": \"note$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"note$ebnf$2\", \"symbols\": [\"int\"], \"postprocess\": id},\n    {\"name\": \"note$ebnf$2\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"note\", \"symbols\": [\"note_id\", \"note$ebnf$1\", \"note$ebnf$2\"]},\n    {\"name\": \"mod_name$string$1\", \"symbols\": [{\"literal\":\"a\"}, {\"literal\":\"d\"}, {\"literal\":\"d\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"mod_name\", \"symbols\": [\"mod_name$string$1\"], \"postprocess\": id},\n    {\"name\": \"mod_name$string$2\", \"symbols\": [{\"literal\":\"f\"}, {\"literal\":\"i\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"mod_name\", \"symbols\": [\"mod_name$string$2\"], \"postprocess\": id},\n    {\"name\": \"mod_name$string$3\", \"symbols\": [{\"literal\":\"n\"}, {\"literal\":\"o\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"mod_name\", \"symbols\": [\"mod_name$string$3\"], \"postprocess\": id},\n    {\"name\": \"mod_name$string$4\", \"symbols\": [{\"literal\":\"s\"}, {\"literal\":\"i\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"mod_name\", \"symbols\": [\"mod_name$string$4\"], \"postprocess\": id},\n    {\"name\": \"mod_name$string$5\", \"symbols\": [{\"literal\":\"t\"}, {\"literal\":\"h\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"mod_name\", \"symbols\": [\"mod_name$string$5\"], \"postprocess\": id},\n    {\"name\": \"mod_name$subexpression$1\", \"symbols\": [/[sS]/, /[uU]/, /[sS]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"mod_name$ebnf$1$subexpression$1\", \"symbols\": [/[sS]/, /[tT]/, /[aA]/, /[iI]/, /[nN]/, /[eE]/, /[dD]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"mod_name$ebnf$1\", \"symbols\": [\"mod_name$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"mod_name$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"mod_name\", \"symbols\": [\"mod_name$subexpression$1\", \"mod_name$ebnf$1\"], \"postprocess\": id},\n    {\"name\": \"mod_name$subexpression$2\", \"symbols\": [/[aA]/, /[uU]/, /[gG]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"mod_name$ebnf$2$subexpression$1\", \"symbols\": [/[mM]/, /[eE]/, /[nN]/, /[tT]/, /[eE]/, /[dD]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"mod_name$ebnf$2\", \"symbols\": [\"mod_name$ebnf$2$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"mod_name$ebnf$2\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"mod_name\", \"symbols\": [\"mod_name$subexpression$2\", \"mod_name$ebnf$2\"], \"postprocess\": id},\n    {\"name\": \"mod_name$subexpression$3\", \"symbols\": [/[dD]/, /[iI]/, /[mM]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"mod_name$ebnf$3$subexpression$1\", \"symbols\": [/[iI]/, /[nN]/, /[iI]/, /[sS]/, /[hH]/, /[eE]/, /[dD]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"mod_name$ebnf$3\", \"symbols\": [\"mod_name$ebnf$3$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"mod_name$ebnf$3\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"mod_name\", \"symbols\": [\"mod_name$subexpression$3\", \"mod_name$ebnf$3\"], \"postprocess\": id},\n    {\"name\": \"mod_name$subexpression$4\", \"symbols\": [/[dD]/, /[oO]/, /[mM]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"mod_name$ebnf$4$subexpression$1\", \"symbols\": [/[iI]/, /[nN]/, /[aA]/, /[nN]/, /[tT]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"mod_name$ebnf$4\", \"symbols\": [\"mod_name$ebnf$4$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"mod_name$ebnf$4\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"mod_name\", \"symbols\": [\"mod_name$subexpression$4\", \"mod_name$ebnf$4\"], \"postprocess\": id},\n    {\"name\": \"mod_name$subexpression$5\", \"symbols\": [/[mM]/, /[iI]/, /[nN]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"mod_name$ebnf$5$string$1\", \"symbols\": [{\"literal\":\"o\"}, {\"literal\":\"r\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"mod_name$ebnf$5\", \"symbols\": [\"mod_name$ebnf$5$string$1\"], \"postprocess\": id},\n    {\"name\": \"mod_name$ebnf$5\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"mod_name\", \"symbols\": [\"mod_name$subexpression$5\", \"mod_name$ebnf$5\"]},\n    {\"name\": \"mod_name\", \"symbols\": [{\"literal\":\"m\"}], \"postprocess\": id},\n    {\"name\": \"mod_name$subexpression$6\", \"symbols\": [/[mM]/, /[aA]/, /[jJ]/], \"postprocess\": function(d) {return d.join(\"\"); }},\n    {\"name\": \"mod_name$ebnf$6$string$1\", \"symbols\": [{\"literal\":\"o\"}, {\"literal\":\"r\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"mod_name$ebnf$6\", \"symbols\": [\"mod_name$ebnf$6$string$1\"], \"postprocess\": id},\n    {\"name\": \"mod_name$ebnf$6\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"mod_name\", \"symbols\": [\"mod_name$subexpression$6\", \"mod_name$ebnf$6\"]},\n    {\"name\": \"mod_name\", \"symbols\": [{\"literal\":\"M\"}], \"postprocess\": id},\n    {\"name\": \"mod$ebnf$1\", \"symbols\": [\"int\"], \"postprocess\": id},\n    {\"name\": \"mod$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"mod\", \"symbols\": [\"mod_name\", \"mod$ebnf$1\"]},\n    {\"name\": \"rest_id\", \"symbols\": [{\"literal\":\"R\"}], \"postprocess\": id},\n    {\"name\": \"note_id\", \"symbols\": [/[A-G]/], \"postprocess\": id},\n    {\"name\": \"accidental\", \"symbols\": [{\"literal\":\"#\"}], \"postprocess\": id},\n    {\"name\": \"accidental\", \"symbols\": [{\"literal\":\"b\"}], \"postprocess\": id},\n    {\"name\": \"separator\", \"symbols\": [{\"literal\":\",\"}]},\n    {\"name\": \"separator\", \"symbols\": [\"__\"], \"postprocess\": ()=> null},\n    {\"name\": \"eol\", \"symbols\": [{\"literal\":\"\\r\"}, {\"literal\":\"\\n\"}], \"postprocess\": () => null},\n    {\"name\": \"eol\", \"symbols\": [{\"literal\":\"\\r\"}]},\n    {\"name\": \"eol\", \"symbols\": [{\"literal\":\"\\n\"}], \"postprocess\": () => null},\n    {\"name\": \"identifier$ebnf$1\", \"symbols\": []},\n    {\"name\": \"identifier$ebnf$1\", \"symbols\": [\"identifier$ebnf$1\", /[^ :]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"identifier\", \"symbols\": [/[A-Za-z0-9_@$]/, \"identifier$ebnf$1\"], \"postprocess\": d => d[0]+d[1].join(\"\")},\n    {\"name\": \"value$ebnf$1\", \"symbols\": []},\n    {\"name\": \"value$ebnf$1\", \"symbols\": [\"value$ebnf$1\", /[^\\n\\r]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"value\", \"symbols\": [/[^ ]/, \"value$ebnf$1\"], \"postprocess\": d => d[0]+d[1].join(\"\")},\n    {\"name\": \"ws$ebnf$1\", \"symbols\": []},\n    {\"name\": \"ws$ebnf$1\", \"symbols\": [\"ws$ebnf$1\", /[ \\s\\t\\v]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"ws\", \"symbols\": [\"ws$ebnf$1\"], \"postprocess\": () => null},\n    {\"name\": \"str$ebnf$1\", \"symbols\": [/[^\\n\\r]/]},\n    {\"name\": \"str$ebnf$1\", \"symbols\": [\"str$ebnf$1\", /[^\\n\\r]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"str\", \"symbols\": [\"str$ebnf$1\"], \"postprocess\": d => d[0].join(\"\")}\n]\n  , ParserStart: \"main\"\n}\nif (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {\n   module.exports = grammar;\n} else {\n   window.grammar = grammar;\n}\n})();\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1566480112479
  }
}